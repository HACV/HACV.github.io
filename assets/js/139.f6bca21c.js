(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{304:function(t,n,a){"use strict";a.r(n);var s=a(0),e=Object(s.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"共用体（联合）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#共用体（联合）"}},[t._v("#")]),t._v(" 共用体（联合）")]),t._v(" "),a("h2",{attrs:{id:"一、union"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、union"}},[t._v("#")]),t._v(" 一、union")]),t._v(" "),a("p",[t._v("union中文翻译为“联合”（又称共用体）")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("吐槽——没事取这么多名字干啥……（好吧，其实是翻译，每个人有自己的翻译方式）")])]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("个人倾向于用共用体的名字，因为union共用内存的特点从名字就能直观的看出来，但是也有书上写成联合，所以，我也从各种地方搜集，发现一个还算说过过去的说明，叫“联合”显示union特点的解释。")])])])]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("联合：大家联合起来使用同一个空间")])])]),t._v(" "),a("h2",{attrs:{id:"二、union的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、union的特点"}},[t._v("#")]),t._v(" 二、union的特点")]),t._v(" "),a("p",[a("b",[t._v("特点")]),t._v("：使用同一个空间。（tips：共用体也有内存对齐！）\n你用了，我就不能用了（除非你想使坏，把前面别人要用的给覆盖掉）。")]),t._v(" "),a("p",[t._v("PS:共用体，其实表明了计算机学科一个很重要的性质，那就是，其实数据都是0和1，至于为什么后面会有字符型，整型，图片，音频什么的，完全是对这些比特位的解释的不用导致的情况，所以，同样比特的可以解释是1首歌，也可以解释是一张图片（当然，需要你解释这些比特的算法正确）。")]),t._v(" "),a("h2",{attrs:{id:"三、常用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、常用场景"}},[t._v("#")]),t._v(" 三、常用场景")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("1）这么节省内存，那嵌入式必须首先用起（要是两个不会同时使用的话。）")]),t._v(" "),a("li",[t._v("2）网络传输：通信中的数据包会用到共用体，因为不知道对方会发送一个什么过来，用共用体就简单了，定义几种格式的包，收到包之后就可以直接根据包的格式取出数据。")])])])])}],!1,null,null,null);n.default=e.exports}}]);