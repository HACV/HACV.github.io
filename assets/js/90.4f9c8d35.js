(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{256:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),n("p",[t._v("计算机中，"),n("font",{attrs:{color:"red",size:"5"}},[t._v("有符号数")]),t._v("有3种表示法：原码--\x3e反码--\x3e补码（发展历程，记得“"),n("strong",[t._v("简书")]),t._v("”上有篇文章讲解了这个发展的历程，告诉了为什么一步步，最后用的补码）\n但是现在目前的电脑其实都是补码表示了，当然，"),n("strong",[t._v("也有书上说")]),t._v("：负数是补码表示，正数是原码/反码/补码表示，行吧，也算是对的。。谁让他们编码真的一样）\n（当然，个人从底层硬件实现来考虑，我觉得说正数是原码表示，负数是补码表示蛮好的，因为这样，我可以想象的是正数和负数首先全部编码为原码，然后根据符号位来判断，我要不要调用求补码的线路，正数不用，负数显然要）\n"),n("font",{staticStyle:{background:"yellow"}},[t._v("记忆：符号位，0为正，1为负")])],1),t._v(" "),n("p",[t._v("原码，反码，补码的正数表达是一样的")]),t._v(" "),t._m(4),t._v(" "),n("p",[t._v("原码就是符号位加上真值的绝对值\n既最高位为符号位，0为正，1为负，其余表示数值的大小\n比如\n正数+3=00000011\n负数-3=10000011")]),t._v(" "),t._m(5),t._v(" "),n("p",[t._v("原码，反码，补码的正数表达是一样的\n正数+3=00000011")]),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),n("p",[t._v("原码，反码，补码的正数表达是一样的\n正数+3=00000011")]),t._v(" "),t._m(8),t._v(" "),n("p",[n("font",{staticStyle:{background:"yellow"}},[t._v("至此，我们可以总结出一种"),n("strong",[t._v("求一个负数的补码")]),t._v("的规则：")]),t._v("\n写出"),n("strong",[t._v("负数")]),t._v("的原码-》符号位不变，其他位取反（求反码）-》符号位不变，末位+1（求补码）\n"),n("strong",[t._v("即：负数原码基础上，符号位不变，其他位取反，末位+1")]),t._v("\n上面，也是国内主流的教材上的方法（比如清华的那本计算机组成的教材）")],1),t._v(" "),n("p",[t._v("但是，我在"),n("font",{staticStyle:{background:"yellow"}},[n("strong",[t._v("另一些书")]),t._v("上看到了下面两种求一个负数的补码方法：")])],1),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),n("p",[t._v("重点：\n"),n("strong",[t._v("计算机不区分有符号数和无符号数")]),t._v(" "),n("strong",[t._v("只有")]),n("font",{attrs:{color:"red",size:"5"}},[t._v("有符号数")]),t._v("有原码，反码，补码\n计算机中存储数据\na.无符号数——直接以对应的二进制表示\nb.有符号数——补码形式表示，无论是计算还是存储")],1),t._v(" "),n("p",[t._v("其实可以说无符号数没有原码，反码，补码一说，毕竟又不用分符号。")]),t._v(" "),n("p",[t._v("《C陷阱与缺陷》一书在“整数溢出”一节中指出：\n如果算术运算符的一个操作数是有符号数，另一个是无符号数，那么有符号数会被转换为无符号数。")]),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),n("p",[t._v("样例：")]),t._v(" "),t._m(14),n("p",[t._v("无符号的加法")]),t._v(" "),n("blockquote",[n("p",[t._v("A11111111 11111111 11111111 11111111（表示32位的无符号最大值4294967295）\nA00000000 00000000 00000000 00000001（表示1）\n1**00000000 00000000 00000000 00000000\n"),n("strong",[t._v("丢弃最高位，所以等于0")]),t._v('（硬件自动实现）\n其实这种情况下个人认为是"溢出"了，但是可以通过下面的做法进行解释\n//上面编译的，没有显示溢出的异常\n'),n("font",{staticStyle:{background:"yellow"}},[t._v("解释：这样溢出后就相当于对（2"),n("sup",[t._v("32")]),t._v("-1）+1=2"),n("sup",[t._v("32")]),t._v(" ，再对和2"),n("sup",[t._v("32")]),t._v(" 取模2"),n("sup",[t._v("32")]),t._v("得到为0")])],1)]),t._v(" "),n("p",[n("strong",[t._v("但是，有本书上的说法，让我对“溢出”这个概念有些混乱")]),t._v("\n《C陷阱与缺陷》在“整数溢出”一节中指出，在"),n("font",{attrs:{color:"red",size:"5"}},[t._v("无符号")]),t._v("算术运算中，没有所谓的“溢出”一说。\n有个博客对它的解释是：\n我想Koenig的思路可能是这样，钟表上，当下午1点的时候，没有任何人会说：“现在是12点溢出了。”\n因为我们已经常识性地知道，我们的钟表上是没有13这个数字的。")],1),t._v(" "),t._m(15)])}),[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"原码，反码，补码——，移码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原码，反码，补码——，移码"}},[this._v("#")]),this._v(" 原码，反码，补码——，移码")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"一、实际背景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、实际背景"}},[this._v("#")]),this._v(" 一、实际背景")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("现实生活")]),this._v("中：在计算机中所有的数据运算都是采用"),s("strong",[this._v("补码")]),this._v("进行的（比如Windows中）\n注意：负数用补码表示，如果相加的和为负，也采用补码表示。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"二、有符号数的原码，反码，补码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、有符号数的原码，反码，补码"}},[this._v("#")]),this._v(" 二、有符号数的原码，反码，补码")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_1）原码："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1）原码："}},[this._v("#")]),this._v(" 1）原码：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_2）反码："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2）反码："}},[this._v("#")]),this._v(" 2）反码：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("负数")]),this._v("的反码是在原码的基础上（"),s("strong",[this._v("符号位不变")]),this._v("，其他位均取反）\n负数-3=11111100")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_3）补码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3）补码"}},[this._v("#")]),this._v(" 3）补码")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("负数的补码是在"),s("strong",[this._v("反码")]),this._v("的基础上（"),s("strong",[this._v("符号位不变")]),this._v("，在末位加1）\n负数-3=11111101")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("blockquote",[n("ul",[n("li",[t._v("1）（唯一的,也是独特的）"),n("strong",[t._v("负数的原码")]),t._v("基础上，直接变补码规则如下：符号位不变，从数的右边往左开始数,遇到“0”不理它,"),n("strong",[t._v("直到遇到第一个“1”为止")]),t._v("，这个"),n("strong",[t._v("第一次遇到的1它本身不变")]),t._v(",但事继续向左（直到符号位右边一个）的每一位取反\n比如：\n原码1001 0010\n补码1110 1110")]),t._v(" "),n("li",[t._v("2）先"),n("strong",[t._v("找到这个负数的正数编码")]),t._v("，然后在这个基础上，所有位全取反，末位+1\n比如：-1（我用8个比特说明）\n+1原码是0000 0001\n全取反是1111 1110\n末位加一是1111 1111\n继续将，主流的方法补充到这，成为第3条")]),t._v(" "),n("li",[t._v("3）负数原码基础上，符号位不变，其他位取反，末位+1\n总结这三种方法：其实，本质都是等效的。。。我也不知道为什么，以前在自学的时候竟然看到了三种方法。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Tips:"),s("strong",[this._v("对于负整数")]),this._v("，补码的补码是原码（强调是负整数，有的书没有强调是负整数）\n比如：\n原码1001\n补码（我用方法3））"),s("code",[this._v("1001->1110->1111")]),this._v("\n原码（补码的补码，继续方法3）"),s("code",[this._v("1111->1000->1001")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"三、有符号数到无符号数的过渡标题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、有符号数到无符号数的过渡标题"}},[this._v("#")]),this._v(" 三、有符号数到无符号数的过渡标题")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"四、关于无符号数和有符号一个注意的地方"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、关于无符号数和有符号一个注意的地方"}},[this._v("#")]),this._v(" 四、关于无符号数和有符号一个注意的地方")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"无符号数，竟然没有溢出一说"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#无符号数，竟然没有溢出一说"}},[this._v("#")]),this._v(" 无符号数，竟然没有溢出一说?")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//4294967295对应二进制 11111111 11111111 11111111 1111111")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4294967295")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"无符号输出:%u\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"有符号输出:%d\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%u"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输出结果如下： ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//无符号输出:4294967295")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//有符号输出:-1")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//0")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//此外编译器警告（unsigned int a=4294967295;）：")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[Warning] this decimal constant is unsigned only in ISO C90")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("虽然，这么说，个人还是觉得这种在一个数据类型边界出现较反常的，我都应该关注一下、\n到目前为止我看过的好几本书的说法，真的有点弄晕我的感觉。但是，至此，我个人倾向是忘记什么叫溢出。只关注底层的比特的变化会不会造成影响。")])])}],!1,null,null,null);s.default=e.exports}}]);