(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{264:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._m(9),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),a("p",[t._v("类中的数据域使用private修饰为私有变量\n反射也可以访问\n什么是反射访问？？？")]),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),a("blockquote",[a("p",[t._v("参考自："),a("a",{attrs:{href:"https://www.huaweicloud.com/articles/4637f3d11eb3fd9a38e017041e23e50a.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("华为云"),a("OutboundLink")],1)])]),t._v(" "),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),a("blockquote",[a("p",[t._v("我的"),a("a",{attrs:{href:"http://naotu.baidu.com/file/02d2413a51829d0c29226a23718613ad?token=d83f2eb1c2d887a6",target:"_blank",rel:"noopener noreferrer"}},[t._v("百度脑图"),a("OutboundLink")],1)]),t._v(" "),t._m(38)]),t._v(" "),t._m(39),t._v(" "),a("p",[t._v("类的成员函数\n类的非成员函数")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("静态成员函数static\n常量成员函数const\n虚函数\n友元函数")]),t._v(" "),t._m(40),t._v(" "),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),t._m(44),t._v(" "),t._m(45),t._v(" "),a("p",[t._v("🐾无法继承的『static函数』")]),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),a("blockquote",[a("p",[t._v("参考自：菜鸟教程"),a("a",{attrs:{href:"https://www.runoob.com/cplusplus/cpp-friend-functions.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("C++ 友元函数"),a("OutboundLink")],1)])]),t._v(" "),t._m(52),t._v(" "),a("p",[t._v("友元函数是不能被继承的\n友元函数没有this指针\n友元只是破坏了类的隐藏性和封装性，可以直接调用，不需要通过对象或者指针")]),t._v(" "),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),t._v(" "),t._m(56),t._m(57),t._v(" "),t._m(58),t._v(" "),t._m(59),t._v(" "),t._m(60),t._v(" "),t._m(61),t._v(" "),a("ul",[a("li",[a("p",[t._v("开源链接："),a("a",{attrs:{href:"https://github.com/svn2github/valgrind",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/svn2github/valgrind"),a("OutboundLink")],1)])]),t._v(" "),t._m(62)]),t._v(" "),t._m(63),t._v(" "),a("ul",[a("li",[t._v("开源链接："),a("a",{attrs:{href:"https://github.com/aclements/mtrace",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/aclements/mtrace"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("『可用于，检查“内存泄漏”』")])]),t._v(" "),t._m(64),t._v(" "),t._m(65),t._v(" "),t._m(66),t._v(" "),t._m(67),t._v(" "),t._m(68),t._v(" "),t._m(69),t._v(" "),a("ul",[t._m(70),t._v(" "),a("li",[a("strong",[t._v("重定义")]),t._v("：也叫做隐藏，子类"),a("strong",[t._v("重新定义")]),t._v("父类中有相同名称的"),a("font",{staticStyle:{background:"yellow"}},[t._v("『"),a("strong",[t._v("非虚函数")]),t._v("』 ")]),t._v("( 参数列表可以不同 ) ，指派生类的函数屏蔽了与其同名的基类函数。可以理解成发生在继承中的重载。")],1),t._v(" "),a("li",[a("strong",[t._v("重写(Override)")]),t._v("：也叫做"),a("strong",[t._v("覆盖")]),t._v("，也叫"),a("strong",[t._v("复写")]),t._v("，一般发生在子类和父类继承关系之间。子类"),a("strong",[t._v("重新定义")]),t._v("父类中有相同名称和参数的"),a("font",{staticStyle:{background:"yellow"}},[t._v("『"),a("strong",[t._v("虚函数")]),t._v("』")]),t._v("。")],1)]),t._v(" "),a("blockquote",[a("p",[t._v("参考："),a("a",{attrs:{href:"https://blog.csdn.net/u010275850/article/details/45583705",target:"_blank",rel:"noopener noreferrer"}},[t._v("C++_重载、重写和重定义的区别"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("PS：但是，从很多英语教材上面，来说，重定义和重写都是单词（override），理解参考第4节")]),t._v(" "),t._m(71),t._v(" "),t._m(72),t._v(" "),t._m(73),t._v(" "),t._m(74),t._m(75),t._v(" "),a("p",[t._v("子类重新定义父类虚函数的方法叫做覆写")]),t._v(" "),t._m(76),t._v(" "),t._m(77),t._m(78),t._v(" "),t._m(79),t._v(" "),t._m(80),t._v(" "),t._m(81),t._v(" "),t._m(82),t._m(83),t._v(" "),t._m(84),t._v(" "),t._m(85),t._v(" "),t._m(86),t._v(" "),t._m(87),t._v(" "),t._m(88),t._m(89),t._v(" "),t._m(90),t._v(" "),t._m(91),t._m(92),t._v(" "),t._m(93),t._v(" "),a("blockquote",[a("p",[t._v("第2点，参考自用户讨论：@"),a("a",{attrs:{href:"https://www.nowcoder.com/profile/2887214",target:"_blank",rel:"noopener noreferrer"}},[t._v("牛客2887214号"),a("OutboundLink")],1)])]),t._v(" "),t._m(94),t._m(95),t._v(" "),a("p",[t._v("title: C++的const底层机制\ndate: 2020-05-31 08:11:04\nsummary: C++对C的const关键字增强的底层机制")]),t._v(" "),t._m(96),t._v(" "),a("p",[t._v("背景：\n我们总说C语言中const修饰的变量看上去似乎是常量，其实是个“冒牌货”，应该叫”常变量”，比如用指针间接赋值，就能改变了。")]),t._v(" "),a("p",[t._v("代码测试：\n将指针间接修改变量值的代码放到C语言编译器和C++编译器去测试")]),t._v(" "),a("p",[t._v("DevC++的C语言编译器")]),t._v(" "),t._m(97),t._m(98),t._v(" "),a("p",[t._v("DevC++的C++语言编译器")]),t._v(" "),t._m(99),t._m(100),t._v(" "),a("p",[t._v("奇特的结果：\n我们要是写了这样的函数在银行程序中，要是用不同编译器，那么对账就对不上了。\n总结：\nC中的const是个常变量，变量的值能够被间接修改。\nC++中的const是一个真正的常量！")]),t._v(" "),a("p",[t._v("Tips：")]),t._v(" "),t._m(101),t._v(" "),a("p",[t._v("那么，我们或许会疑惑：\nQ：我们说C++中的是一个真正的常量，那为什么，没有C++编译器对我们”用指针间接修改”的行为，没有报warning或者error呢？\nA：C++要兼容C，所以，它认为这个语法是可以的\nQ：那么问题又来了，那他既然兼容，那么为什么最后却没改变那个变量的值呢？\nA：因为C++只是兼容那种语法写法，但是底层的实现却对const关键字进行了加强。")]),t._v(" "),t._m(102),t._v(" "),t._m(103),t._v(" "),a("p",[t._v("当C++编译器，扫描到常量声明时，它不再像C语言那样，把这个const给它单独分配内存。")]),t._v(" "),a("p",[t._v("在我们先前的//test.cpp中。\nC++进行了如下操作：")]),t._v(" "),t._m(104),t._v(" "),t._m(105),t._v(" "),t._m(106),t._v(" "),t._m(107),t._v(" "),a("p",[t._v("我们现在来证明这个开辟的内存空间的存在")]),t._v(" "),t._m(108),t._m(109),t._v(" "),t._m(110),t._v(" "),t._m(111),t._v(" "),t._m(112),t._v(" "),t._m(113),t._v(" "),t._m(114),t._v(" "),t._m(115),t._v(" "),a("p",[t._v("Tips：\n只有下面两种的时候，它才会分配空间")]),t._v(" "),t._m(116),t._v(" "),t._m(117),t._v(" "),t._m(118),t._v(" "),t._m(119),t._v(" "),a("p",[t._v("证明的代码：")]),t._v(" "),t._m(120),t._v(" "),a("img",{attrs:{src:"/photos/2020.5.30_31/05.png",width:"80%"}}),t._v(" "),t._m(121),t._v(" "),t._m(122),t._v(" "),a("p",[t._v("C++对C语言的const关键字进行了增强！\n"),a("font",{attrs:{color:"red",size:"3"}},[t._v("\n特点：\nC++中的const修饰的变量，变成了真正的常量，所以叫const常量")])],1),t._v(" "),t._m(123),t._v(" "),a("p",[t._v("Tips:要想了解C++中const实现机制，请移步《C++中对C的const关键字增强》一文")]),t._v(" "),t._m(124),t._v(" "),t._m(125),a("p",[t._v("当成员函数被声明为const时，如果这个const成员函数试图修改这个对象的数据，编译器将视为错误。\n因为：你都和我约定了不能修改，那就得履行。")]),t._v(" "),t._m(126),t._v(" "),t._m(127),t._v(" "),t._m(128),t._v(" "),t._m(129),t._m(130),t._v(" "),a("p",[t._v("函数返回值采用“引用传递”的场合,出现在类的赋值函数中，目的是为了实现链式表达。\n例如：")]),t._v(" "),t._m(131),t._m(132),t._v(" "),t._m(133),t._v(" "),a("p",[t._v("补充杂项：")]),t._v(" "),t._m(134),t._v(" "),t._m(135),t._v(" "),t._m(136),t._m(137),t._v(" "),t._m(138),t._v(" "),t._m(139)])}),[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"c-98核心详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c-98核心详解"}},[this._v("#")]),this._v(" C++98核心详解")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"📑-目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#📑-目录"}},[this._v("#")]),this._v(" 📑 目录")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" C"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("中的"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 命名空间\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v("成员\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 到底什么是成员函数\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("05.")]),t._v("C语言中的流和缓冲器的概念\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"⭐️3加1对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#⭐️3加1对比"}},[this._v("#")]),this._v(" ⭐️3加1对比")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（1）class"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）class"}},[this._v("#")]),this._v(" （1）class")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("、继承，默认是『"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v("继承』\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("、内部可以放成员变量，成员函数，默认成员变量访问控制是：『"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v("』\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("、成员函数类：\n    有』构造函数\n    有』析构函数\n    有』虚函数\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（2）struct『c-中』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（2）struct『c-中』"}},[this._v("#")]),this._v(" （2）struct『C++中』")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("本质："),s("strong",[this._v("是一种class")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("、继承，默认是『"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v("继承』____\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("、内部可以放成员变量，成员函数，默认成员变量访问控制是：『"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v("』__\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("、成员函数类：\n    有』构造函数\n    有』析构函数\n    有』虚函数\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<bits/stdc++.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("99")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("demo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tcout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a="')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tcout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"die AAA"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myPoly")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tcout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*AAA******"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//struct B : private A")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//下面的写法，等价于，struct B : public A")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token base-clause"}},[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("B")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("888")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("demo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tcout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b="')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("B")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tcout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"die BBB"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myPoly")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tcout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*BBBB******"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//因为加上了system("pause");所以需要下面这样挂掉B，才能知道B的析构函数被调用')]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tA one"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("demo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\tB two"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\ttwo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("demo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n\t\tA "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" pointer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tpointer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myPoly")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("system")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pause"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br"),a("span",{staticClass:"line-number"},[t._v("39")]),a("br"),a("span",{staticClass:"line-number"},[t._v("40")]),a("br"),a("span",{staticClass:"line-number"},[t._v("41")]),a("br"),a("span",{staticClass:"line-number"},[t._v("42")]),a("br"),a("span",{staticClass:"line-number"},[t._v("43")]),a("br"),a("span",{staticClass:"line-number"},[t._v("44")]),a("br"),a("span",{staticClass:"line-number"},[t._v("45")]),a("br"),a("span",{staticClass:"line-number"},[t._v("46")]),a("br"),a("span",{staticClass:"line-number"},[t._v("47")]),a("br"),a("span",{staticClass:"line-number"},[t._v("48")]),a("br"),a("span",{staticClass:"line-number"},[t._v("49")]),a("br"),a("span",{staticClass:"line-number"},[t._v("50")]),a("br"),a("span",{staticClass:"line-number"},[t._v("51")]),a("br"),a("span",{staticClass:"line-number"},[t._v("52")]),a("br"),a("span",{staticClass:"line-number"},[t._v("53")]),a("br"),a("span",{staticClass:"line-number"},[t._v("54")]),a("br"),a("span",{staticClass:"line-number"},[t._v("55")]),a("br"),a("span",{staticClass:"line-number"},[t._v("56")]),a("br"),a("span",{staticClass:"line-number"},[t._v("57")]),a("br"),a("span",{staticClass:"line-number"},[t._v("58")]),a("br"),a("span",{staticClass:"line-number"},[t._v("59")]),a("br"),a("span",{staticClass:"line-number"},[t._v("60")]),a("br"),a("span",{staticClass:"line-number"},[t._v("61")]),a("br"),a("span",{staticClass:"line-number"},[t._v("62")]),a("br"),a("span",{staticClass:"line-number"},[t._v("63")]),a("br"),a("span",{staticClass:"line-number"},[t._v("64")]),a("br"),a("span",{staticClass:"line-number"},[t._v("65")]),a("br"),a("span",{staticClass:"line-number"},[t._v("66")]),a("br"),a("span",{staticClass:"line-number"},[t._v("67")]),a("br"),a("span",{staticClass:"line-number"},[t._v("68")]),a("br"),a("span",{staticClass:"line-number"},[t._v("69")]),a("br"),a("span",{staticClass:"line-number"},[t._v("70")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（3）union『c-中』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（3）union『c-中』"}},[this._v("#")]),this._v(" （3）union『C++中』")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("本质：它是一种"),s("strong",[this._v("特殊的类")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("参考《后台开发》")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("、继承：继承自别人"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("能给别人继承都『不可以』______\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("、内部可以放成员变量，成员函数，默认成员变量访问控制是：『"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v("』__\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("、成员函数类：\n    有』构造函数\n    有』析构函数\n    不可以有』虚函数______\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（4）enum『只有它不是特殊的类』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（4）enum『只有它不是特殊的类』"}},[this._v("#")]),this._v(" （4）enum『只有它不是特殊的类』")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("枚举类型"),s("strong",[this._v("是1种基本类型")]),this._v("，不是1种构造类型，因为它不能再分解为任何其他基本类型『比如，class,struct,union』")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"🐾工程术语"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🐾工程术语"}},[this._v("#")]),this._v(" 🐾工程术语")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（1）『接口类、抽象类、聚合类』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）『接口类、抽象类、聚合类』"}},[this._v("#")]),this._v(" （1）『接口类、抽象类、聚合类』")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("接口类："),s("strong",[this._v("仅仅")]),this._v("含有含有pure virtual （纯虚函数）的类")]),this._v(" "),s("li",[this._v("抽象类：含有pure virtual （纯虚函数）的类")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("So，抽象类和接口都"),s("strong",[this._v("不能")]),this._v("被实例化")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[this._v("类不可以多继承，而接口可以多实现\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（2）『反射』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（2）『反射』"}},[this._v("#")]),this._v(" （2）『反射』")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("C++ 本身"),s("strong",[this._v("并不支持")]),this._v("反射，而 Java 支持反射机制")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"访问private"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#访问private"}},[this._v("#")]),this._v(" 访问private")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("通过类的层面，来取得类中方法")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（3）内存泄漏"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（3）内存泄漏"}},[this._v("#")]),this._v(" （3）内存泄漏")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("内存泄漏是不仅仅出现在C/C++程序的问题，"),s("strong",[this._v("Java程序也会内存泄漏")]),this._v("！")]),this._v(" "),s("li",[this._v("java是自动管理内存的，但是也会有内存泄露，比如加入HashMap的对象hash值改变了就无法从HashMap中remove，这就造成了内存泄露")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（4）可以将『布尔值』与『整数』进行比较吗-？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（4）可以将『布尔值』与『整数』进行比较吗-？"}},[this._v("#")]),this._v(" （4）可以将『布尔值』与『整数』进行比较吗 ？")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("Java不可以！")]),this._v(" "),s("li",[this._v("C++可以")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"🍉类的『成员变量』和『非成员变量』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🍉类的『成员变量』和『非成员变量』"}},[this._v("#")]),this._v(" 🍉类的『成员变量』和『非成员变量』")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（1）static成员变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）static成员变量"}},[this._v("#")]),this._v(" （1）static成员变量")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("c++的一个类中『"),s("strong",[this._v("声明")]),this._v("』一个static成员变量，static是加了访问控制的全局变量，不被继承")]),this._v(" "),s("li",[this._v("类和子类对象，static变量占有一份内存")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("重点理解："),s("strong",[this._v("静态成员变量的初始化一定要在『类外』")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("原因： 因为静态成员变量本身在main函数未开始时已经存在。不要让成员变量的初始化依赖于对象。不用对象，难到就不能用这一变量了吗？如果将初始化放在类内。那么"),s("strong",[this._v("当不声明对象时")]),this._v("，无法使用这一静态变量。编译器报错为‘undeclared identifier’")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("类中的声明和定义辨析：（重点、难点）\n笔者的看法是：\n1、逻辑上说明是一起，只能表示可以『声明』在一起。（声明的门槛很低）\n2、具体内存在哪分配，这个决定『能不能在类内』进行『定义』\n\n比如：\n1、友元函数在『类内』声明，不能在『类内』定义，能在『类外』定义\n2、static成员变量在『类内』声明，不能在『类内』定义，能在『类外』定义\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（2）static和非static特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（2）static和非static特点"}},[this._v("#")]),this._v(" （2）static和非static特点")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("静态成员存在于"),s("strong",[this._v("内存")]),this._v("，非静态成员需要实例化才会分配内存（注意，也就是在虚拟内存空间中，表示的是.bss和.data段中）")]),this._v(" "),s("li",[this._v("非静态成员的生存期决定于该类的生存期，而静态成员生存期则与程序生命期相同")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"⏰类的『成员函数』和『非成员函数』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#⏰类的『成员函数』和『非成员函数』"}},[this._v("#")]),this._v(" ⏰"),s("strong",[this._v("类的『成员函数』和『非成员函数』")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("说明：成员函数的分类，需要考虑排序组合，"),s("strong",[this._v("是很多，很复杂")]),this._v("的，不然就只能一个一个维度去分类。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("到底什么是成员函数")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("类的成员函数：是定义为"),s("strong",[this._v("类的一部分")]),this._v("的函数，有时也被称为方法。（C++primer第5版，P20）")]),this._v(" "),s("li",[this._v("各类函数中：构造函数、析构函数、拷贝初始化构造函数等是类的成员函数。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_1、成员函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、成员函数"}},[this._v("#")]),this._v(" 1、成员函数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("成员函数分下面3类（应该说是2类，纯虚函数属于虚函数的子集的话）")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1、非虚函数（non-virtual 函数）：\n你不希望派生类（derived class）重新定义 (override, 复写) 它.\n2、虚函数（virtual 函數）：\n你希望 derived class 重新定义 (override, 复写) 它，且你对它已有『默认』定义。\n3、纯虚函数（pure virtual 函數）：\n你希望 derived class 『一定』要重新定义 (override 复写)\n它，你对它沒有默认定义。\n\nPS：我们把不是纯的虚函数的虚函数叫作（impure virtual函数）\nPS：在语法上，我们只要在任何一个函数前面加上virtual这样一个关键字，它就成为一个虚函数。\n数据可以被继承下来，就是占它用了内存。\n函数的继承如何理解？但是不应该从内存角度理解，函数的继承，继承的是调用权利\n\nPS：其实纯虚函数是可以有定义的！！\n> 出处：《C++Primer》中文版第五版541页第22行。\n我们可以为纯虚函数提供定义，不过函数体『必须定义在类的外部』。若定义在类的内部，会出现错误：pure-specifier on function-definition。\n》 虚函数是可以定义『在类的内部的』，外部也可以！\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("参考自：侯捷")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("strong",[this._v("override")]),this._v("这个术语，在这个主题不能随便用！！")]),this._v(" "),s("li",[this._v("这个术语，"),s("strong",[this._v("一定是用在『虚函数』被重新定义，才能够叫（override）")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_2、非成员函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、非成员函数"}},[this._v("#")]),this._v(" 2、非成员函数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"（1）友元函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）友元函数"}},[this._v("#")]),this._v(" （1）友元函数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("注意：友元函数不是类的成员函数！")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("1、友元函数的『"),s("strong",[this._v("声明")]),this._v("』可以放在类"),s("strong",[this._v("声明")]),this._v("的任何地方，不受访问限定关键字private、protected、public的限制")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("2、尽管友元函数的"),s("strong",[this._v("原型")]),this._v("有在"),s("strong",[this._v("类的定义")]),this._v("中出现过，但是"),s("strong",[this._v("友元函数并不是成员函数")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("3、友元是一种"),s("strong",[this._v("定义在类外部")]),this._v("的普通函数，但它需要在类体内进行"),s("strong",[this._v("说明『声明』")]),this._v("，为了与该类的成员函数加以区别，在说明时前面加以关键字friend")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"友元"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#友元"}},[this._v("#")]),this._v(" 友元")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("一个基类的声明中有纯虚函数，该基类派生类一定不再是抽象类（错误）")])]),this._v(" "),s("li",[s("p",[this._v("如果在派生类中没有对所有纯虚函数进行定义，则此派生类仍然是抽象类，不能用来定义对象。所以A错.")])]),this._v(" "),s("li",[s("p",[this._v("构造函数不能被覆盖")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"🍀命名空间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🍀命名空间"}},[this._v("#")]),this._v(" 🍀命名空间")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（1）namespace命名空间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）namespace命名空间"}},[this._v("#")]),this._v(" （1）namespace命名空间")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("- namespace，是指标识符的各种可见范围\n\n- C++标准程序库中的所有标识符都被定义于一个名为std的namespace中。\n\n  一 ：<iostream>和<iostream.h>格式不一样，前者没有后缀，实际上，在你的编译器include文件夹里面可以看到，二者是两个文件，打开文件就会发现，里面的代码是不一样的。后缀为.h的头文件c++标准已经明确提出不支持了，早些的实现将标准库功能定义在**全局空间**里，声明在带.h后缀的头文件里，c++标准为了和C区别开，也为了正确使用命名空间，规定头文件不使用后缀.h。 因此。\n\n- 1、命名空间主要是将[全局空间]『』『『划分为更加小块的全局空间\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"🥇重载（overload）和重写（override）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🥇重载（overload）和重写（override）"}},[this._v("#")]),this._v(" 🥇重载（overload）和重写（override）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("虚成员函数不可能是static 成员函数")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"🐾六、调试工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🐾六、调试工具"}},[this._v("#")]),this._v(" 🐾六、调试工具")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（1）valgrind"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）valgrind"}},[this._v("#")]),this._v(" （1）Valgrind")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("1款内存分析工具，是『1套』Linux下的开放源代码的仿真调试工具的集合。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("p",[this._v("『可用于，检查“内存泄漏”』")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（2）mtrace"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（2）mtrace"}},[this._v("#")]),this._v(" （2）mtrace")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"🐾c-核心基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🐾c-核心基础"}},[this._v("#")]),this._v(" 🐾C++核心基础")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"一、面向对象难点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、面向对象难点"}},[this._v("#")]),this._v(" 一、面向对象难点")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("面向对象的三大基本特征：封装、继承、多态")]),this._v(" "),s("li",[this._v("面向对象的五大基本原则：")]),this._v(" "),s("li",[this._v("单一职责原则、开放封闭原则、里氏替换原则、依赖倒置原则、接口隔离原则")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（1）类型转换函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）类型转换函数"}},[this._v("#")]),this._v(" （1）类型转换函数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("带非默认参数的构造函数可以把基本类型数据转换成类类型对象。")])]),this._v(" "),s("li",[s("p",[this._v("类型转换函数可以把类类型对象转换为其他指定类型对象。")])]),this._v(" "),s("li",[s("p",[this._v("类型转换函数只能定义为一个类的成员函数，不能定义为类的友元函数。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"二、辨析：重写-override-与重载-overload-与重定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、辨析：重写-override-与重载-overload-与重定义"}},[this._v("#")]),this._v(" 二、辨析：重写(Override)与重载(Overload)与重定义")])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("strong",[this._v("重载(Overload)")]),this._v("：函数名相同，函数的参数个数、参数类型或参数顺序三者中必须至少有一种不同。函数返回值的类型可以相同，也可以不相同。发生在一个类内部。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"三、多态与虚函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、多态与虚函数"}},[this._v("#")]),this._v(" 三、多态与虚函数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（1）虚函数相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）虚函数相关"}},[this._v("#")]),this._v(" （1）虚函数相关")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("1、（static）静态函数不可以是虚函数")]),this._v(" "),s("li",[this._v("2、（inline）虚函数可以声明为inline，但是编译器不会将其作为inline函数处理")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("a")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n尽管以上写法是没有语法错误的，并且可以执行，但其实test函数已经不是内联函数了，因为"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v("只是对编译器的一个建议而已。\n搞清本质就好。\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("多态是为了"),s("strong",[this._v("接口")]),this._v("重用，封装和继承是为了代码重用")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（2）虚函数能不能inline"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（2）虚函数能不能inline"}},[this._v("#")]),this._v(" （2）虚函数能不能inline")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("Q:虚函数不能内联，但是语法不出错？\n\nA:不是的，虚函数在没有表现多态的时候是可以内联的，表现多态的时候不能\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br"),s("span",{staticClass:"line-number"},[this._v("2")]),s("br"),s("span",{staticClass:"line-number"},[this._v("3")]),s("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("虚函数不可以内联，因为虚函数是在运行期的时候确定具体调用的函数，内联是在编译期的时候进行代码展开，两者冲突，所以没有一起使用的做法。")]),this._v(" "),s("li",[this._v("内联只是对编译器的一种请求，是否真正内联要看编译器的处理，虚函数是可以内联的，但是编译器不会响应内联请求，即他会忽略内联说明，将其当做普通虚函数处理。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("在C++中，为了让某个类只能通过new来创建（即如果直接创建对象，编译器将报错），应该")]),this._v("（）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("将析构函数设为私有")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（3）非多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（3）非多态"}},[this._v("#")]),this._v(" （3）非多态")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<bits/stdc++.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mytest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tcout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AAA"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token base-clause"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mytest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tcout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"BBB"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\t\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\n\tA "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mytest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"三、『运算符重载』详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、『运算符重载』详解"}},[this._v("#")]),this._v(" 三、『运算符重载』详解")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("（本质还是函数重载）")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（1）重载的2种函数类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）重载的2种函数类型"}},[this._v("#")]),this._v(" （1）重载的2种函数类型")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("1、成员函数")]),this._v(" "),s("li",[this._v("2、友元函数『属于，非成员函数』")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("易错：有的运算符，只能重载为『成员函数』")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" \t\t\t\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//重载，下标运算符，比如重载后，返回当前vetor中的元素，需要this指针，而非成员函数是没有this指针的233")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//重载，函数调用运算符，")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("\n上面"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("个，『只能』通过成员函数进行重载\n我的理解，备注如上\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（2）可以重载，但建议不要重载的运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（2）可以重载，但建议不要重载的运算符"}},[this._v("#")]),this._v(" （2）可以重载，但建议不要重载的运算符")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("code",[this._v("&&")]),this._v("和"),s("code",[this._v("||")]),this._v("很建议不要重载『会出点问题』")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("、因为，重载运算符，也就意味着靠函数重载来完成，操作数会作为『函数参数，传递』\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("、C"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("的『函数参数都会被求值，无法实现（短路规则）』\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（3）不能重载的5个运算符记忆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（3）不能重载的5个运算符记忆"}},[this._v("#")]),this._v(" （3）不能重载的5个运算符记忆")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("p",[t._v("百度招聘考过。")])]),t._v(" "),a("li",[a("p",[t._v("1、第1个，也是我们常常忘记是运算符的"),a("code",[t._v("sizeof")])])]),t._v(" "),a("li",[a("p",[t._v("2、其他4个，记住只要挂"),a("code",[t._v(".")]),t._v("的运算符"),a("strong",[t._v("均不能被重载")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("C"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("不能重载的总共五个：\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("）"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),t._v("（类成员访问运算符） \n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("）"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" .*"')]),t._v("（类成员指针访问运算符） \n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("）"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"::"')]),t._v("（域运算符） \n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("）"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"siezof"')]),t._v("（长度运算符） \n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("）"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" ?:"')]),t._v("（条件运算符）\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"♻️c-中对c的const关键字增强"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#♻️c-中对c的const关键字增强"}},[this._v("#")]),this._v(" ♻️C++中对C的const关键字增强")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（1）问题导入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）问题导入"}},[this._v("#")]),this._v(" （1）问题导入")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//demo.c ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("98")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("结果：\n"),s("img",{attrs:{src:"/photos/2020.5.30_31/01.png",width:"80%"}})])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//test.cpp ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<cstdio>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("98")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("结果：\n"),s("img",{attrs:{src:"/photos/2020.5.30_31/02.png",width:"80%"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("table",[s("td",{attrs:{bgcolor:"#FFFF",FF:""}},[this._v("\n以上两次测试，都没有显示warning和error")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（2）底层原理分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（2）底层原理分析"}},[this._v("#")]),this._v(" （2）底层原理分析")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"_1、c-编译器对const做了一些加强，做了一些特殊的处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、c-编译器对const做了一些加强，做了一些特殊的处理"}},[this._v("#")]),this._v(" 1、C++编译器对const做了一些加强，做了一些特殊的处理")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("blockquote",[a("ul",[a("li",[t._v("1）扫描到这一行，const int a=98;\nC++编译器会把这个"),a("b",[t._v("变量a")]),t._v("放在一个"),a("b",[t._v("符号表（键值-值对）")]),t._v("里面\n"),a("b",[t._v("此时，并没有分配内存！！！")]),t._v("\n注意：这样的话，key和value是定了，不能修改的了。\n符号表具体的实现和我们的内存中的，栈，堆不是同一套实现机制。\n有很多常量就都放在这个里面了。\nTips：\n当你去"),a("b",[t._v("使用")]),t._v("这个a的时候，它就给你从符号表里面给你把这个98给拿出来，供你"),a("b",[t._v("使用")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("table",[s("td",{attrs:{bgcolor:"#FFFF",FF:""}},[this._v('\n注意"使用"一词')])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("ul",[s("li",[this._v("2）遇到类似这样的情况，此时才给a变量另外分配一个内存。\n扫描到这一句p=(int "),s("em",[this._v(")&a;\n当你对这个a变量取地址的时候，C++编译器，会为这个a再"),s("b",[this._v("单独的开辟一块内存空间")]),this._v("，然后你把这个内存空间，赋给了p，相当于一个指针P指向了这里。然后你通过")]),this._v("p去间接的修改的地址，不再是原来的值（value）,而是我们新开辟的空间的值（注意理解）\n所以，当你再使用a的时候，你打印的还是98（符号表中的a）\n"),s("img",{attrs:{src:"/photos/2020.5.30_31/03.png",width:"90%"}})])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"_2、证明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、证明"}},[this._v("#")]),this._v(" 2、证明")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//solution.cpp ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<cstdio>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("98")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\t\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a=%d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*p=%d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("打印的是:\n"),s("img",{attrs:{src:"/photos/2020.5.30_31/04.png",width:"80%"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("b",[this._v("注意：")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("table",[s("td",{attrs:{bgcolor:"#FFFF",FF:""}},[this._v("\nC++编译器虽然可能为const常量分配空间，但不会"),s("b",[this._v("使用")]),this._v("其存储空间中的值，除非你用指针操作。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（3）结论和补充"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（3）结论和补充"}},[this._v("#")]),this._v(" （3）结论和补充")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("1）C语言中的const变量\nC语言中const变量是只读变量，"),s("b",[this._v("有自己的存储空间")]),this._v("\n2）C++中的const常量")])},function(){var t=this.$createElement,s=this._self._c||t;return s("table",[s("td",{attrs:{bgcolor:"#FFFF",FF:""}},[this._v("\n注意：可能分配存储空间,也可能不分配存储空间!")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("编译过程中若发现"),s("b",[this._v("使用常量")]),this._v("则直接以符号表中的值替换")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("ul",[s("li",[this._v("当const常量为全局，并且需要在其它文件中使用,即使用了"),s("b",[this._v("extern")]),this._v("操作符")]),this._v(" "),s("li",[this._v("当使用&操作符取const常量的地址，编译过程中若发现对const使用了"),s("b",[this._v("&操作符")]),this._v("，则给对应的常量分配存储空间（兼容C）")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（4）补充疑问"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（4）补充疑问"}},[this._v("#")]),this._v(" （4）补充疑问")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Q：那么要是分配内存，C++中那个const的分配内存是在什么时候分配的呢？是在编译器"),s("b",[this._v("编译阶段")]),this._v("，还是在"),s("b",[this._v("执行阶段")]),this._v("分配？")])},function(){var t=this.$createElement,s=this._self._c||t;return s("table",[s("td",{attrs:{bgcolor:"#FFFF",FF:""}},[this._v("\nＡ：C++中const分配内存的时机，是在编译期间！（记住！）")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//test.cpp ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<cstdio>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("98")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"&a=%d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"&b=%d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//用了取地址 ")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"&c=%d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("结果表明：\nconst int b的地址在a和c之间，符合我们局部变量申请内存的"),s("b",[this._v("压栈的顺序")]),this._v("，"),s("b",[this._v("它并没有因为，&b这句话写到int c后面，就先分配a，c最后才b")]),this._v("，而是，它扫描完之后，看到这里有&b了，就分配地址了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（5）详解c-中const常见用途"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（5）详解c-中const常见用途"}},[this._v("#")]),this._v(" （5）详解C++中const常见用途")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("ul",[s("li",[this._v("区别：")])]),this._v(" "),s("blockquote",[s("ul",[s("li",[this._v("1）C语言中的const变量\nC语言中const变量是只读变量，"),s("b",[this._v("有自己的存储空间")])]),this._v(" "),s("li",[this._v("2）C++中的const常量\n注意："),s("b",[this._v("可能分配存储空间,也可能不分配存储空间!")])])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"_1、const成员函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、const成员函数"}},[this._v("#")]),this._v(" 1、const成员函数")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetLength")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" itslength"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//成员函数声明为常量")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"_2、指向const对象的指针"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、指向const对象的指针"}},[this._v("#")]),this._v(" 2、指向const对象的指针")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果声明了一个"),s("b",[this._v("指向const对象")]),this._v("的指针，则通过该指针只能调用const方法（成员函数）。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("blockquote",[a("p",[t._v("-因为：const就是用来规定，"),a("b",[t._v("属于这个对象")]),t._v("的是不能有改变的")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("const成员函数（常量成员函数），不会去修改这个对象任何"),a("b",[t._v("非静态成员变量")]),t._v("的值。")]),t._v(" "),a("li",[t._v("static成员函数（静态成员函数），也不会去修改这个对象任何"),a("b",[t._v("非静态成员变量")]),t._v("(毕竟，静态成员函数和静态成员变量其实本质是全局变量嘛，不需要作用在具体的对象上，"),a("b",[t._v("我们写在类里面，只是为了彰显和这个类有紧密的关系")]),t._v(")")]),t._v(" "),a("li",[t._v("因此，我们指向const对象的指针，能够调用的是const成员函数和static成员函数")]),t._v(" "),a("li",[t._v("普通成员函数，内部可以实现修改非静态成员变量的语句，所以"),a("b",[t._v("可能会破坏const对象规定的，不能改变我的内部数据的原则")]),t._v("。")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("Rectangle"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" pRect "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" Rectangle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Rectangle "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" pConstRect "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" Rectangle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//指向const对象")]),t._v("\nRectangle"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" pConstPtr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" Rectangle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pConstRect是指向const对象的指针，它只能使用声明为const的成员函数，如GetLength（）。")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"_3、const-修饰函数的返回值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、const-修饰函数的返回值"}},[this._v("#")]),this._v(" 3、const 修饰函数的返回值")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\nA "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" operate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" A "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 赋值函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nA a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a, b, c 为A 的对象")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正常的链式赋值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不正常的链式赋值，但合法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果将赋值函数的返回值加const 修饰，那么该返回值的内容不允许被改动。上例中，语句 a = b = c 仍然正确，但是语句 (a = b) = c 则是非法的。")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"_4、补充"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、补充"}},[this._v("#")]),this._v(" 4、补充")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("blockquote",[a("ul",[a("li",[t._v("非const对象可以访问"),a("b",[t._v("任意的")]),t._v("成员函数,自然包括const成员函数,静态成员函数")]),t._v(" "),a("li",[t._v("const对象的成员是不可修改的,然而const对象通过指针维护的对象却是可以修改的.")]),t._v(" "),a("li",[t._v("const成员函数不可以修改对象的数据,不管对象是否具有const性质.它在编译时,以是否修改成员数据为依据,进行检查。")]),t._v(" "),a("li",[t._v("然而加上mutable修饰符的数据成员,对于任何情况下通过任何手段都可修改,自然此时的const成员函数是可以修改它的")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("blockquote",[a("ul",[a("li",[t._v("const 修饰引用（&）修饰输入参数的用法：")])]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("1-对于"),a("b",[t._v("非内部数据类型")]),t._v("的输入参数，应该将“"),a("b",[t._v("值传递")]),t._v("”的方式改为“"),a("b",[t._v("const 引用传递")]),t._v("”，目的是提高效率。例如将"),a("code",[t._v("void Func(A a)")]),t._v(" 改为"),a("code",[t._v("void Func(const A &a)")]),t._v("。当然，虽然这样的确能提高效率。但此时千万千万要小心，一定要搞清楚函数究竟是想返回一个对象的“拷贝”还是仅返回“别名”就可以了，否则程序会出错。")]),t._v(" "),a("li",[t._v("2-对于"),a("b",[t._v("内部数据类型")]),t._v("的输入参数，不要将“值传递”的方式改为“const 引用传递”。否则既达不到提高效率的目的，又降低了函数的可理解性。例如"),a("code",[t._v("void Func(int x)")]),t._v(" 不应该改为"),a("code",[t._v("void Func(const int &x)")]),t._v("。（如何理解？？？）")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("ul",[s("li",[this._v("const 修饰星号（*）用法：")])]),this._v(" "),s("blockquote",[s("ul",[s("li",[this._v("如果给以“指针传递”方式的函数返回值加const 修饰，那么函数返回值（即指针）的内容不能被修改，该返回值只能被赋给加const 修饰的同类型指针。例如函数")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n如下语句将出现编译错误：\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n正确的用法是\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（6）const导致的函数重载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（6）const导致的函数重载"}},[this._v("#")]),this._v(" （6）const导致的函数重载")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("1、C++不允许仅根据函数的返回类型重载函数名称；\n2、可以编写两个名称相同，参数也相同的函数，其中一个是"),s("strong",[this._v("const")]),this._v("，另一个不是。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("没用参数的两个函数是不能重载的.说法是不正确的，因为还有const")])])}],!1,null,null,null);s.default=e.exports}}]);