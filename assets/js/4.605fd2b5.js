(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{172:function(t,s,n){t.exports=n.p+"assets/img/IP地址类别.a861f3de.png"},173:function(t,s,n){t.exports=n.p+"assets/img/01.单工.bca0e19b.png"},174:function(t,s,n){t.exports=n.p+"assets/img/02.2.半双工.dd5edd7b.png"},175:function(t,s,n){t.exports=n.p+"assets/img/03.双工.64c0e44f.png"},176:function(t,s,n){t.exports=n.p+"assets/img/02.1.半双工.3bfb913c.png"},231:function(t,s,n){"use strict";n.r(s);var a=[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"计算机网络工程术语"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#计算机网络工程术语"}},[this._v("#")]),this._v(" 计算机网络工程术语")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("电路交换：物理链路\n分组交换\n时延\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("种通信方式：单工通信、半双工通信、全双工通信\n广播、单播、组播\n点对点『网络层』\n端对端『传输层』\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("计算机科学并非自然科学，显然我们无法改变物理规律或者数学规律，而计算机软件的世界却不一样。\n只要我们愿意，我们就可以从零开始编写代码。而为什么我们写一个hello world的时候并不会从硬件操作开始写呢？因为我们可以站在巨人的肩膀上，省时省力。\n\n所以，计算机软件世界中，你能够做什么，很大程度取决于你能够调用什么API。API是前人劳动的总结，就像“定理”或者“推论”，你甚至可以不知道API的实现具体做了什么，你只要知道什么时候可以用这条API，用了这条API后会有什么结果和副作用。\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br"),s("span",{staticClass:"line-number"},[this._v("2")]),s("br"),s("span",{staticClass:"line-number"},[this._v("3")]),s("br"),s("span",{staticClass:"line-number"},[this._v("4")]),s("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_01-子网、局域网、网段的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_01-子网、局域网、网段的关系"}},[this._v("#")]),this._v(" 01.子网、局域网、网段的关系")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[s("strong",[this._v("在不要求精确性的情况下，子网、局域网和网段可以理解为同一个意思，但是同一个局域网/同一个子网/同一个网段 和 同一个网络不是同一个概念")])])]),this._v(" "),s("li",[s("p",[this._v("子网划分")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("例"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("：本例通过子网数来划分子网，未考虑主机数。\n一家集团公司有"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("家子公司，每家子公司又有"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("个部门。上级给出一个『『『"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("172.16")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v("的网段』』』（我疑惑的地方！！！），让给每家子公司以及子公司的部门分配网段。\n思路：既然有"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("家子公司，那么就要划分"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("个『『『子网段』』』（或许这话更准？？），但是每家子公司又有"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("个部门，因此又要在每家子公司所属的网段中划分"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("个子网分配给各部门。\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_02-《linux多线程服务器编程》的说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_02-《linux多线程服务器编程》的说明"}},[this._v("#")]),this._v(" 02.《Linux多线程服务器编程》的说明")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_03-公有ip和私有ip"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_03-公有ip和私有ip"}},[this._v("#")]),this._v(" 03.公有IP和私有IP")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-txt line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("IP地址的分类？\nIP地址的网络部分是由internet地址分配机构来统一分配的，这样可以保证IP的唯一性\n\n『注意1』\nIP地址中全为1的IP即255.255.255.255 它标示限制广播地址，如果将其作为数据包的目标地址可以理解为发送到所有网络的所有主机\n\n『注意2』\nIP地址全为0的IP即0.0.0.0 表示启动时的IP地址 含义尚未未分配的IP地址\n\n『注意3』\n127是用来进行本机测试的，除了127.255.255.255外，其他的127开头的地址都代表本机\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("公共地址")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("由 Inter NIC（Internet Network Information Center 因特网信息中心）负责。这些 IP 地址分配给注册并向Inter NIC提出申请的组织机构，"),s("strong",[this._v("公有 IP 全球唯一")]),this._v("，通过它直接访问因特网（直接能上网）。公共IP地址是能够让两台电脑相互识别的数字。在连接互联网时，用户的电脑通常被ISP（互联网服务提供者）安排一个地址。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("私有地址")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("属于非注册地址，专门为"),s("strong",[this._v("组织机构内部使用")]),this._v("，也就是说，私有 IP 不能直接上网。在许多电脑或设备被电缆或无线相互连接时，就可以构成一个私有网络。尽管私有网络中的地址必需是唯一的，但"),s("strong",[this._v("不同网络")]),this._v("可以使用相同的地址。我们办的宽带通过路由器接入，使用的IP地址就是私有IP地址，路由器的设备将数据利用私有IP地址在连接的电脑之间传输\n原文链接：https://blog.csdn.net/sdd220/article/details/78337796")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_04-公有-私有ip（a、b、c类）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_04-公有-私有ip（a、b、c类）"}},[this._v("#")]),this._v(" 04.公有/私有IP（A、B、C类）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("[知乎](https://www.zhihu.com/question/302935308/answer/544123478)\n作者：架在天国的陆\n链接：https://www.zhihu.com/question/302935308/answer/544123478\n来源：知乎\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br"),s("span",{staticClass:"line-number"},[this._v("2")]),s("br"),s("span",{staticClass:"line-number"},[this._v("3")]),s("br"),s("span",{staticClass:"line-number"},[this._v("4")]),s("br"),s("span",{staticClass:"line-number"},[this._v("5")]),s("br")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("li",[t._v("1． A类IP地址一个A类IP地址由1字节的网络地址和3字节主机地址组成\n"),n("ul",[n("li",[n("strong",[t._v("网络地址的最高位必须是“0”")]),t._v("， 地址范围从"),n("code",[t._v("1.0.0.0")]),t._v("到"),n("code",[t._v("126.0.0.0")])]),t._v(" "),n("li",[t._v("可用的A类网络有126个，每个网络能容纳1亿多个主机。"),n("strong",[t._v("(中国有4个A类IPv4地址)")])]),t._v(" "),n("li",[t._v("关于网络号：从0-127的说法，其实是可以理解的『但是』")]),t._v(" "),n("li",[t._v("原因：")]),t._v(" "),n("li",[t._v("『注意2』\nIP地址全为0的IP即0.0.0.0 表示启动时的IP地址 含义尚未未分配的IP地址")]),t._v(" "),n("li",[t._v("『注意3』\n127是用来进行本机测试的，除了127.255.255.255外，其他的127开头的地址都代表本机")]),t._v(" "),n("li",[t._v("所以，我们只算1-126的")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("li",[t._v("3． C类IP地址一个C类IP地址由3字节的网络地址和1字节的主机地址组成\n"),n("ul",[n("li",[t._v("网络地址的最高位必须是“110”。范围从192.0.0.0到223.255.255.255")]),t._v(" "),n("li",[t._v("C类网络可达209万余个，每个网络能容纳254个主机。")]),t._v(" "),n("li",[t._v("IP地址由4个字节组成(4*8=32 bit)，采用点分十进制标记法，即X.X.X.X的形式，用4个十进制数来对应表示4个字节的二进制数值，数值中间用“.”隔开。")]),t._v(" "),n("li",[t._v("每个十进制数的取值在 0～255之间。\n"),n("ul",[n("li",[t._v("由于A类地址中首位为0(0XXXXXXX)，所以其第1个十进制数的取值范围被限定于1～126(2的7次方128个)之间(0和 127另有指定)。")]),t._v(" "),n("li",[t._v("同理，B类地址中第1、2位为10(10XXXXXX)，第1个十进制数的取值范围被限定于128～191(2的6次方64个)之间。")]),t._v(" "),n("li",[t._v("C类地址中第1、2、3位为110(110XXXXX)，第1个十进制数的取值范围被限定于192～223(2的5次方32个)之间。")])])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"_05-a、b、c类私有地址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_05-a、b、c类私有地址"}},[this._v("#")]),this._v(" 05.A、B、C类私有地址")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("date: 2020-06-22")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("A类私有地址："),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("，范围是："),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.255")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("255.255")]),t._v("\nB类私有地址："),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("172.16")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("，范围是："),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("172.16")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("172.31")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("255.255")]),t._v("\nC类私有地址："),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v("，范围是："),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("255.255")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_05-单工-半双工-全双工"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_05-单工-半双工-全双工"}},[this._v("#")]),this._v(" 05.单工-半双工-全双工")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("3种通信方式：单工通信、半双工通信、全双工通信")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_5-1-暴力版"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-暴力版"}},[this._v("#")]),this._v(" 5.1. 暴力版")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-txt line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("- 单工模式：\n  我打你 你不能还手  打你这个过程是发送  你抗揍这个过程是接收\n- 半双工模式：\n  - 我打你  你不能还手  \n  - 过一会儿 你打我 我不能还手\n- 全双工模式：\n  - 俩人互殴 \n  - 我俩可以同时出拳（同时发送）同时抗揍（同时接收）😊😊😊😊😊😊\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_5-2-蜜雪冰城版"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-蜜雪冰城版"}},[this._v("#")]),this._v(" 5.2.蜜雪冰城版")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("2021.06.27")])]),this._v(" "),s("li",[s("p",[this._v("单工模式：")]),this._v(" "),s("ul",[s("li",[this._v("无时不刻，蜜雪冰城接收你的爱")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("半双工模式：\n"),s("ul",[s("li",[this._v("3点整，你爱我")]),this._v(" "),s("li",[this._v("5点整，我爱你\n"),s("img",{attrs:{src:n(176)}})])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("全双工模式：")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("无时不刻，『你爱我，我爱你』")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("图片来源：蜜雪冰城")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("date: 2020-08-08")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"⭐️07-tcp状态转换『重要』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#⭐️07-tcp状态转换『重要』"}},[this._v("#")]),this._v(" ⭐️07.TCP状态转换『重要』")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("03.『TCP状态转换记忆TCP状态转换图『记忆』")])]),this._v(" "),s("li",[s("p",[this._v("Windows下可以用命令查看这些状态")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[this._v("netstat")]),this._v(" -a\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("netstat")]),t._v(" -apn "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6666")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("这是我们在网络开发过程当中，进行客户端服务器调试的，一个非常重要的依据和手段。我们可以通过我们看到的各种状态，来达到推测出，客户端或服务器当前处于服务器通信的哪个阶段。")]),this._v(" "),s("li",[this._v("有这些之后，我们就能知道，当前为什么出现这样的错误\n"),s("img",{attrs:{src:"https://gitee.com/HACV/images_bed/raw/master/MainBlog/2020/2020_08/08_08/01.png"}})])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ul",[n("li",[n("code",[t._v("CLOSED")]),t._v("：表示初始状态。")]),t._v(" "),n("li",[n("code",[t._v("LISTEN")]),t._v("：该状态表示服务器端的某个SOCKET处于监听状态，可以接受连接。\n"),n("code",[t._v("SYN_SENT")]),t._v("：这个状态与SYN_RCVD遥相呼应，当客户端SOCKET执行CONNECT连接时，它首先发送SYN报文，随即进入到了SYN_SENT状态，并等待服务端的发送三次握手中的第2个报文。SYN_SENT状态表示客户端已发送SYN报文。")]),t._v(" "),n("li",[n("code",[t._v("SYN_RCVD")]),t._v(": 该状态表示接收到SYN报文，在正常情况下，这个状态是服务器端的SOCKET在建立TCP连接时的三次握手会话过程中的一个中间状态，很短暂。此种状态时，当收到客户端的ACK报文后，会进入到ESTABLISHED状态。")]),t._v(" "),n("li",[n("code",[t._v("ESTABLISHED")]),t._v("：（三次握手已经完成）表示连接已经建立。")]),t._v(" "),n("li",[n("code",[t._v("FIN_WAIT_1")]),t._v(":  FIN_WAIT_1和FIN_WAIT_2状态的真正含义都是表示等待对方的FIN报文。区别是：\nFIN_WAIT_1状态是当socket在ESTABLISHED状态时，想主动关闭连接，向对方发送了FIN报文，此时该socket进入到FIN_WAIT_1状态。\nFIN_WAIT_2状态是当对方回应ACK后，该socket进入到FIN_WAIT_2状态，正常情况下，对方应马上回应ACK报文，所以FIN_WAIT_1状态一般较难见到，而FIN_WAIT_2状态可用netstat看到。")]),t._v(" "),n("li",[n("code",[t._v("FIN_WAIT_2")]),t._v("：（主动发起关闭的一端。半关闭完成）主动关闭链接的一方，发出FIN收到ACK以后进入该状态。称之为半连接或半关闭状态。该状态下的socket只能接收数据，不能发。")]),t._v(" "),n("li",[n("code",[t._v("TIME_WAIT")]),t._v(":（主动发起关闭的这端） 表示收到了对方的FIN报文，并发送出了ACK报文，等2MSL（我们使用的Linux下，这个时间大概是1分钟左右，等这个的目的是。我饿不确定对方是否能够收到我发送的ACK）后即可回到CLOSED可用状态。如果FIN_WAIT_1状态下，收到对方同时带 FIN标志和ACK标志的报文时，可以直接进入到TIME_WAIT状态，而无须经过FIN_WAIT_2状态。")]),t._v(" "),n("li",[n("code",[t._v("CLOSING")]),t._v(": 这种状态较特殊，属于一种较罕见的状态。正常情况下，当你发送FIN报文后，按理来说是应该先收到（或同时收到）对方的 ACK报文，再收到对方的FIN报文。但是CLOSING状态表示你发送FIN报文后，并没有收到对方的ACK报文，反而却也收到了对方的FIN报文。什么情况下会出现此种情况呢？如果双方几乎在同时close一个SOCKET的话，那么就出现了双方同时发送FIN报文的情况，也即会出现CLOSING状态，表示双方都正在关闭SOCKET连接。")]),t._v(" "),n("li",[n("code",[t._v("CLOSE_WAIT")]),t._v(": 此种状态表示在等待关闭。当对方关闭一个SOCKET后发送FIN报文给自己，系统会回应一个ACK报文给对方，此时则进入到CLOSE_WAIT状态。接下来呢，察看是否还有数据发送给对方，如果没有可以 close这个SOCKET，发送FIN报文给对方，即关闭连接。所以在CLOSE_WAIT状态下，需要关闭连接。")]),t._v(" "),n("li",[n("code",[t._v("LAST_ACK")]),t._v(": 该状态是被动关闭一方在发送FIN报文后，最后等待对方的ACK报文。当收到ACK报文后，即可以进入到CLOSED可用状态。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("问题：为啥主动关闭这一端，要设计一个"),s("code",[this._v("TIME_WAIT")]),this._v("状态？\n确保最后一个发送的ACK（主动关闭一端的）能够顺利到达。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_7-1-『2msl』-maximum-segment-lifetime"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-『2msl』-maximum-segment-lifetime"}},[this._v("#")]),this._v(" 7.1.『2MSL』 (Maximum Segment Lifetime)")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("（1）让4次握手关闭流程更加可靠；4次握手的最后一个ACK是是由主动关闭方发送出去的，若这个ACK丢失，被动关闭方会再次发一个FIN过来。若主动关闭方能够保持一个2MSL的TIME_WAIT状态，则有更大的机会让丢失的ACK被再次发送出去。")]),this._v(" "),s("li",[this._v("（2）防止lost duplicate对后续新建正常链接的传输造成破坏。lost uplicate在实际的网络中非常常见，经常是由于路由器产生故障，路径无法收敛，导致一个packet在路由器A，B，C之间做类似死循环的跳转。IP头部有个TTL，限制了一个包在网络中的最大跳数，因此这个包有两种命运，要么最后TTL变为0，在网络中消失；要么TTL在变为0之前路由器路径收敛，它凭借剩余的TTL跳数终于到达目的地。但非常可惜的是TCP通过超时重传机制在早些时候发送了一个跟它一模一样的包，并先于它达到了目的地，因此它的命运也就注定被TCP协议栈抛弃。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("2MSL的缺点和解决")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("缺点：要等2MSL才能释放我用的那个端口号。"),s("br"),this._v("\n虽说不错，但是如果重启，这样维护需要2MSL，但是不方便。")]),this._v(" "),s("li",[this._v("解决方案：那个2MSL需要等1分钟，你继续等待1分钟，但是我们的端口允许我们重复使用。")]),this._v(" "),s("li",[this._v("端口复用")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_7-2-半关闭"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-半关闭"}},[this._v("#")]),this._v(" 7.2.半关闭")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("RST指的是（标志位，和SYN啥的是对等的，实际上不太会用到，"),s("strong",[this._v("『RST表示reset』")]),this._v("）")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/socket.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("shutdown")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sockfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" how"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsockfd"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 需要关闭的socket的描述符\nhow"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\t允许为shutdown操作选择以下几种方式"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("SHUT_RD")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：\t关闭sockfd上的读功能，此选项将不允许sockfd进行读操作。\n\t\t\t\t\t该套接字不再接受数据，任何当前在套接字接受缓冲区的数据将被无声的丢弃掉。\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("SHUT_WR")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\t\t关闭sockfd的写功能，此选项将不允许sockfd进行写操作。进程不能在对此套接字发出写操作。\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("SHUT_RDWR")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\t关闭sockfd的读写功能。相当于调用shutdown两次：首先是以SHUT_RD"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("然后以SHUT_WR。\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("strong",[this._v("TCP状态转换图——『最重要』")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"总览"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总览"}},[this._v("#")]),this._v(" 总览")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("（TCP在网络编程当中的地位，相当于你吃饭过程当中，筷子的地位）")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ol",[s("li",[s("p",[this._v("client.c  编写")])]),this._v(" "),s("li",[s("p",[this._v("TCP三次握手建立连接\nTCP——不会丢包（错！！！）  丢了可以重传。")])]),this._v(" "),s("li",[s("p",[this._v("MTU、mss、半关闭（这是我们在TCP3次握手中，分支的一些细小的知识）\nMTU： 最大传输单元    受协议限制   以太网1500   IP 65535\nmss： 受MTU 标示一个数据包携带数据的上限数。\nwin： 滑动窗口——当前本端 能接收的数据上限值。(单位：字节)")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"五、网络套接字相关函数『记忆』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、网络套接字相关函数『记忆』"}},[this._v("#")]),this._v(" 五、网络套接字相关函数『记忆』")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（1）字节序和主机字节序的转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）字节序和主机字节序的转换"}},[this._v("#")]),this._v(" （1）字节序和主机字节序的转换")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("TCP/IP协议规定，网络数据流应采用"),s("strong",[this._v("大端字节序")]),this._v("，即低地址高字节")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("blockquote",[n("ul",[n("li",[t._v("原因，因为TCP/IP最早诞生的时候，几乎是和Unix一块诞生的")]),t._v(" "),n("li",[t._v("那个年代，数据存储主要是IBM公司来做，那那时候，他们选用的存储方式都是大端存储法。")]),t._v(" "),n("li",[t._v("现在IBM的好多大型机，还是采用的大端法")]),t._v(" "),n("li",[t._v("后来，小端法，实际上是在Windows才有的。Intel架构的时候")]),t._v(" "),n("li",[t._v("后来在Intel架构上几乎都是用的小端法、")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<arpa/inet.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("htonl")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" hostlong"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("htons")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v(" hostshort"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ntohl")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" netlong"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ntohs")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v(" netshort"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（2）地址转换函数（比1省略了步骤）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（2）地址转换函数（比1省略了步骤）"}},[this._v("#")]),this._v(" （2）地址转换函数（比1省略了步骤）")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<arpa/inet.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("inet_pton")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" af"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("src"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dst"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("inet_ntop")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" af"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("src"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dst"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("socklen_t")]),t._v(" size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（3）sockaddr数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（3）sockaddr数据结构"}},[this._v("#")]),this._v(" （3）sockaddr数据结构")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("strcut sockaddr "),s("strong",[this._v("很多网络编程函数诞生早于IPv4协议（强调，理解bind等）")]),this._v("\n那时候都使用的是sockaddr结构体,为了向前兼容，现在sockaddr退化成了（void *）的作用\n传递一个地址给函数，至于这个函数是sockaddr_in还是sockaddr_in6，由地址族确定\n然后函数内部再强制类型转化为所需的地址类型。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("blockquote",[n("ul",[n("li",[t._v("由于，在其中，把结构体sockaddr改为了sockaddr_in结构体，导致编程的时候变麻烦了、")]),t._v(" "),n("li",[t._v("特别是这3个函数，他们需要的是sockaddr")]),t._v(" "),n("li",[t._v("struct sockaddr_in addr;(定义的时候，要这么定义，原因：sockaddr已经被废弃了，不能用了)")]),t._v(" "),n("li",[t._v("bind(,(struct sockaddr*)&addr );")]),t._v(" "),n("li",[t._v("accept()")]),t._v(" "),n("li",[t._v("connect()")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("服务器端，肯定不能自动分配：如果这样，那我的客户端，上"),s("strong",[this._v("哪里绑定")]),this._v("去2333\n其实，客户端也可以bind，但是，我们不绑定的话，我们可以看做（隐式绑定）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_1）socket函数（创建套接字）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1）socket函数（创建套接字）"}},[this._v("#")]),this._v(" 1）socket函数（创建套接字）")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* See NOTES */")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//显然，如果，你的头文件包含了unixstat这个头文件就包含了")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/socket.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("socket")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" domain"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" protocol"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("blockquote",[n("ul",[n("li",[t._v("1）domain:")])]),t._v(" "),n("blockquote",[n("ul",[n("li",[n("code",[t._v("AF_INET")]),t._v("（IPv4） 这是大多数用来产生socket的协议，使用TCP或UDP来传输，用IPv4的地址")]),t._v(" "),n("li",[n("code",[t._v("AF_INET6")]),t._v("（IPv6） 与上面类似，不过是来用IPv6的地址")]),t._v(" "),n("li",[n("code",[t._v("AF_UNIX")]),t._v("（也就是"),n("strong",[t._v("本地套接字")]),t._v("） 本地协议，使用在Unix和Linux系统上，一般都是当客户端和服务器在同一台及其上的时候使用")])])]),t._v(" "),n("ul",[n("li",[t._v("2）type:（你所选用的socket它内部采用的通信协议是什么？流式，报式协议")])]),t._v(" "),n("blockquote",[n("ul",[n("li",[n("code",[t._v("SOCK_STREAM")]),t._v(" 这个协议是按照顺序的、可靠的、数据完整的基于字节流的连接。这是一个使用最多的socket类型，这个socket是使用"),n("strong",[t._v("TCP来")]),t._v("进行传输。（流式协议典型代表——TCP）")]),t._v(" "),n("li",[n("code",[t._v("SOCK_DGRAM")]),t._v(" 这个协议是无连接的、固定长度的传输调用。该协议是不可靠的，使用"),n("strong",[t._v("UDP")]),t._v("来进行它的连接。（报式协议典型代表——UDP）")]),t._v(" "),n("li",[n("code",[t._v("SOCK_SEQPACKET")]),t._v("该协议是双线路的、可靠的连接，发送固定长度的数据包进行传输。必须把这个包完整的接受才能进行读取。")]),t._v(" "),n("li",[n("code",[t._v("SOCK_RAW")]),t._v(" socket类型提供单一的网络访问，这个socket类型使用ICMP公共协议。（ping、traceroute使用该协议）")]),t._v(" "),n("li",[n("code",[t._v("SOCK_RDM")]),t._v(" 这个类型是很少使用的，在大部分的操作系统上没有实现，它是提供给数据链路层使用，不保证数据包的顺序")])])]),t._v(" "),n("ul",[n("li",[t._v("3）protocol:（表示我们选用的协议号是什么，一般默认0，比如流式协议的默认协议是TCP）")])]),t._v(" "),n("blockquote",[n("ul",[n("li",[t._v("传0 表示使用默认协议。\n返回值：\n成功：返回指向新创建的socket的文件描述符，失败：返回-1，设置errno")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_2）bind函数（绑定，"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2）bind函数（绑定，"}},[this._v("#")]),this._v(" 2）bind函数（绑定，")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* See NOTES */")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/socket.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sockfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("socklen_t")]),t._v(" addrlen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("blockquote",[n("ul",[n("li",[t._v("服务器程序所监听的网络地址和端口号通常是固定不变的，客户端程序得知服务器程序的地址和端口号后就可以向服务器发起连接，因此"),n("strong",[t._v("服务器")]),t._v("需要调用bind绑定一个"),n("strong",[t._v("固定")]),t._v("的"),n("strong",[t._v("网络地址")]),t._v("和"),n("strong",[t._v("端口号")]),t._v("。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_3）listen函数（指定监听上限数，并不是用来监听的）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3）listen函数（指定监听上限数，并不是用来监听的）"}},[this._v("#")]),this._v(" 3）listen函数（指定监听上限数，并不是用来监听的）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("指定，"),s("strong",[this._v("同时")]),this._v("允许多少个客户端和我"),s("strong",[this._v("建立（强调建立）"),s("strong",[this._v("连接，（不是指我一共能够")]),this._v("支持")]),this._v("多少个连接）\n一旦建立完了，那么就可以继续建立连接。\n比如，我们TCP建立连接的3次握手\n（比如，我们指定，处于三次握手过程当中的数量，可以是多少个）")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* See NOTES */")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/socket.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sockfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" backlog"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("典型的服务器程序可以同时服务于多个客户端，当有客户端发起连接时，服务器调用的accept()返回并接受这个连接，如果有大量的客户端发起连接而服务器来不及处理，尚未accept的客户端就处于连接等待状态，"),s("strong",[this._v("listen()声明sockfd处于监听状态")]),this._v("，并且最多允许有backlog个客户端处于连接待状态，如果接收到更多的连接请求就忽略。listen()成功返回0，失败返回-1。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_4）accept函数（这个函数作用，很重要，"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4）accept函数（这个函数作用，很重要，"}},[this._v("#")]),this._v(" 4）accept函数（这个函数作用，很重要，")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")]),t._v(" \t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* See NOTES */")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/socket.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("accept")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sockfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("socklen_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("addrlen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("sockdf:\nsocket文件描述符\naddr:\n"),n("strong",[t._v("传出参数")]),t._v("，返回链接客户端地址信息，含IP地址和端口号\naddrlen:\n"),n("strong",[t._v("传入传出参数（函数调用的时候，要传入一个参数，函数调用之后，这个参数要发生改变）")]),t._v("（值-结果）,传入sizeof(addr)大小，函数返回时返回真正接收到地址结构体的大小\n返回值：\n成功返回一个"),n("strong",[t._v("新的")]),t._v("socket文件描述符（注意是全新的），"),n("strong",[t._v("用于和客户端通信")]),t._v("，失败返回-1，设置errno")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("三方握手完成后，服务器调用accept()接受连接")]),this._v("，如果服务器调用accept()时还没有客户端的连接请求，就阻塞等待直到有客户端连接上来。addr是一个传出参数，accept()返回时传出客户端的地址和端口号。addrlen参数是一个传入传出参数（value-result argument），传入的是调用者提供的缓冲区addr的长度以避免缓冲区溢出问题，传出的是客户端地址结构体的实际长度（有可能没有占满调用者提供的缓冲区）。如果给addr参数传NULL，表示不关心客户端的地址。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_5）connect函数（建立连接，客户端建立连接）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5）connect函数（建立连接，客户端建立连接）"}},[this._v("#")]),this._v(" 5）connect函数（建立连接，客户端建立连接）")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")]),t._v(" \t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* See NOTES */")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/socket.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sockfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("socklen_t")]),t._v(" addrlen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("sockdf:\nsocket文件描述符**（客户端自己建立的socket）**\naddr:\n传入参数，指定"),s("strong",[this._v("服务器端")]),this._v("地址信息，含IP地址和端口号\naddrlen:\n传入参数,传入sizeof(addr)大小\n返回值：\n成功返回0，失败返回-1，设置errno")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"六、tcp的两份代码（要倒背如流）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、tcp的两份代码（要倒背如流）"}},[this._v("#")]),this._v(" 六、TCP的两份代码（要倒背如流）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（1）服务器代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）服务器代码"}},[this._v("#")]),this._v(" （1）服务器代码")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdlib.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<string.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/socket.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<netinet/in.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<arpa/inet.h>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("MAXLINE")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token expression"}},[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")])])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("SERV_PORT")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token expression"}},[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6666")])])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr_in")]),t._v(" servaddr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cliaddr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("socklen_t")]),t._v(" cliaddr_len"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" listenfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" connfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXLINE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("INET_ADDRSTRLEN"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\tlistenfd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("socket")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AF_INET"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SOCK_STREAM"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bzero")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("servaddr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("servaddr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tservaddr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sin_family "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" AF_INET"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tservaddr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sin_addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("s_addr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("htonl")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("INADDR_ANY"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tservaddr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sin_port "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("htons")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SERV_PORT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("servaddr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("servaddr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Accepting connections ...\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tcliaddr_len "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cliaddr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tconnfd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("accept")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listenfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("cliaddr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("cliaddr_len"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tn "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MAXLINE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"received from %s at PORT %d\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("inet_ntop")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AF_INET"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("cliaddr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sin_addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ntohs")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cliaddr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sin_port"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\tbuf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toupper")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br"),n("span",{staticClass:"line-number"},[t._v("35")]),n("br"),n("span",{staticClass:"line-number"},[t._v("36")]),n("br"),n("span",{staticClass:"line-number"},[t._v("37")]),n("br"),n("span",{staticClass:"line-number"},[t._v("38")]),n("br"),n("span",{staticClass:"line-number"},[t._v("39")]),n("br"),n("span",{staticClass:"line-number"},[t._v("40")]),n("br"),n("span",{staticClass:"line-number"},[t._v("41")]),n("br"),n("span",{staticClass:"line-number"},[t._v("42")]),n("br"),n("span",{staticClass:"line-number"},[t._v("43")]),n("br"),n("span",{staticClass:"line-number"},[t._v("44")]),n("br"),n("span",{staticClass:"line-number"},[t._v("45")]),n("br"),n("span",{staticClass:"line-number"},[t._v("46")]),n("br"),n("span",{staticClass:"line-number"},[t._v("47")]),n("br"),n("span",{staticClass:"line-number"},[t._v("48")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（2）只写了服务器端，如何测试？nc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（2）只写了服务器端，如何测试？nc"}},[this._v("#")]),this._v(" （2）只写了服务器端，如何测试？nc")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[this._v("nc")]),this._v("\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("nc")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1 "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6666")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（3）客户端代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（3）客户端代码"}},[this._v("#")]),this._v(" （3）客户端代码")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdlib.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<string.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/socket.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<netinet/in.h>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("MAXLINE")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token expression"}},[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")])])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//服务器端的端口号！！！！！")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("SERV_PORT")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token expression"}},[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6666")])])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr_in")]),t._v(" servaddr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXLINE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sockfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fputs")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"usage: ./client message\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nstr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" argv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\tsockfd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("socket")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AF_INET"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SOCK_STREAM"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bzero")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("servaddr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("servaddr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tservaddr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sin_family "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" AF_INET"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("inet_pton")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AF_INET"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"127.0.0.1"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("servaddr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sin_addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tservaddr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sin_port "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("htons")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SERV_PORT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sockfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("servaddr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("servaddr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sockfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("strlen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\tn "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sockfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MAXLINE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Response from server:\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("STDOUT_FILENO"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sockfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br"),n("span",{staticClass:"line-number"},[t._v("35")]),n("br"),n("span",{staticClass:"line-number"},[t._v("36")]),n("br"),n("span",{staticClass:"line-number"},[t._v("37")]),n("br"),n("span",{staticClass:"line-number"},[t._v("38")]),n("br"),n("span",{staticClass:"line-number"},[t._v("39")]),n("br"),n("span",{staticClass:"line-number"},[t._v("40")]),n("br"),n("span",{staticClass:"line-number"},[t._v("41")]),n("br"),n("span",{staticClass:"line-number"},[t._v("42")]),n("br"),n("span",{staticClass:"line-number"},[t._v("43")]),n("br"),n("span",{staticClass:"line-number"},[t._v("44")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"七、错误处理函数（让网络编程程序更加健壮）（错误封装，这种思想很重要）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#七、错误处理函数（让网络编程程序更加健壮）（错误封装，这种思想很重要）"}},[this._v("#")]),this._v(" 七、错误处理函数（让网络编程程序更加健壮）（错误封装，这种思想很重要）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"八、『tcp3次握手和4次挥手』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#八、『tcp3次握手和4次挥手』"}},[this._v("#")]),this._v(" 八、『TCP3次握手和4次挥手』")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以针对这种网络层不稳定or不安全\n传输层：\n大概2种处理方法\n1）对不稳定的网络层，完全不弥补——能不能接受到，无所谓——UDP，无连接的不可靠**报文（因为有去无回，所以叫报）"),s("strong",[this._v("传输（有去无回的，我们认为这个数据传输方向是单向的）\n2）对不稳定的网络层，做完全弥补。对我们每发的数据包进行记录，发现没有接收到，重发——TCP\n面向连接的可靠")]),this._v("数据包（难怪叫包）**传递")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("传输层实际上是为了对我们不稳定的网络层进行弥补操作。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（1）tcp通信时序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）tcp通信时序"}},[this._v("#")]),this._v(" （1）TCP通信时序")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（2）4次挥手（原因）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（2）4次挥手（原因）"}},[this._v("#")]),this._v(" （2）4次挥手（原因）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Linux操作系统中，我允许，建立连接的双方有一端关闭连接，但是另一端不关闭。（这种状态，称为"),s("strong",[this._v("半关闭")]),this._v("）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("ul",[s("li",[this._v("疑惑：")]),this._v(" "),s("li",[this._v("IP层， 我所能容纳的上限是65535（也就是16bit）（他所能容纳的数据上限是16位数，这个65535是指你网络层，如果我单独把他拎出来，单独看他，他所能够携带的数据上限是65535这么多，但是我们知道，你在网络中传输，你不能单独用IP进行传输，脱离了应用层，传输层，链路层，你根本无法传输到外面，额，这些概念真是坑）")]),this._v(" "),s("li",[this._v("以太网，所能容纳的上限是1500\n两者的关系，这就涉及到数据包在各个路由器的")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（3）mtu（最大传输单元）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（3）mtu（最大传输单元）"}},[this._v("#")]),this._v(" （3）MTU（最大传输单元）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("通信术语： "),s("strong",[this._v("最大传输单元")]),this._v("（Maximum Transmission Unit，MTU）")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("是指一种通信协议的某一层上面所能通过的最大数据包大小（以字节为单位）。最大传输单元这个参数通常与通信接口有关（网络接口卡、串口等）。从上面的MTU，我们引出了——"),s("strong",[this._v("最大传输大小mss")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（4）滑动窗口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（4）滑动窗口"}},[this._v("#")]),this._v(" （4）滑动窗口")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("(TCP流量控制)")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"✅概念辨析『重要』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#✅概念辨析『重要』"}},[this._v("#")]),this._v(" ✅概念辨析『重要』")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_01-链路层、网络接口层、数据链路层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_01-链路层、网络接口层、数据链路层"}},[this._v("#")]),this._v(" 01.链路层、网络接口层、数据链路层")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("code",[this._v("7层")]),this._v("模型中，只有『数据链路层』的说法（巫"),s("strong",[this._v("术")]),this._v("忘传会表应）")]),this._v(" "),s("li",[s("code",[this._v("TCP/IP")]),this._v("4层模型中，只有『链路层』或者是『网络接口层』的说法，注意概念！")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_02-区分arp和rarp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_02-区分arp和rarp"}},[this._v("#")]),this._v(" 02.区分ARP和RARP")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("记忆方法：")]),this._v(" "),s("p",[this._v("ARP和RARP，对应短和长")]),this._v(" "),s("p",[this._v("IP和MAC，对应短和长")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("ARP是借助IP地址，请求MAC地址\t『短短长』\nRARP是借助MAC地址，请求IP地址\t『长长短』\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br"),s("span",{staticClass:"line-number"},[this._v("2")]),s("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[this._v("#")]),this._v(" 参考资料")])}],e=n(0),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._m(2),a("blockquote",[a("p",[t._v("参考自知乎：什么是"),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/145194248",target:"_blank",rel:"noopener noreferrer"}},[t._v("API"),a("OutboundLink")],1)])]),t._v(" "),t._m(3),t._v(" "),a("p",[t._v("CSDN"),a("a",{attrs:{href:"https://blog.csdn.net/jeffleo/article/details/54174835",target:"_blank",rel:"noopener noreferrer"}},[t._v("解释"),a("OutboundLink")],1)]),t._v(" "),t._m(4),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://blog.51cto.com/yuanbin/112029",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文章"),a("OutboundLink")],1),t._v("（很不错）")])]),t._v(" "),t._m(5),t._m(6),t._v(" "),a("ul",[a("li",[t._v("Q：TCP协议真的有所谓的“粘包问题”吗？")]),t._v(" "),a("li",[t._v("《"),a("a",{attrs:{href:"https://book.douban.com/subject/1828749/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Effective TCP/IP Programming"),a("OutboundLink")],1),t._v("》这本书属于专家经验总结类，初看时觉得收获很大，工作一段时间再看也能有新的发现。比如第6 条“TCP是一个字节流协议”，看过这一条就不会去研究所谓的“TCP粘包问题”。")])]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"http://www.52im.net/thread-2608-1-1.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文章"),a("OutboundLink")],1)])]),t._v(" "),t._m(7),t._v(" "),t._m(8),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),a("p",[t._v("什么是a.b.c类地址？（zhihu）")]),t._v(" "),t._m(14),a("ul",[t._m(15),t._v(" "),a("li",[t._v("2． B类IP地址一个B类IP地址由2个字节的网络地址和2个字节的主机地址组成\n"),a("ul",[a("li",[t._v("网络地址的最高位必须是“10”，地址范围从128.0.0.0到191.255.255.255")]),t._v(" "),a("li",[t._v("可用的B类网络有16382个，每个网络能容纳6万多个主机")]),t._v(" "),a("li",[a("font",{staticStyle:{background:"yellow"}},[t._v("『其中，除去私有IP172.16.0.0~172.31.255.255这些私有B类IP，其他的是B类公有IP』")])],1)])]),t._v(" "),t._m(16)]),t._v(" "),a("img",{attrs:{src:n(172)}}),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),a("p",[t._v("私有地址(privateaddress)也叫专用地址（私网IP），它们"),a("font",{staticStyle:{background:"yellow"}},[t._v("不会在全球使用，只具有本地意义。")])],1),t._v(" "),t._m(19),a("img",{attrs:{alt:"",src:"https://uploadfiles.nowcoder.com/images/20171101/9430388_1509499582678_79540D335CBD37FB9AC1EC8191B91765"}}),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._m(24),t._v(" "),t._m(25),t._v(" "),a("p",[a("font",{staticStyle:{background:"yellow"}},[t._v("无时不刻『你爱我』")])],1),t._v(" "),a("img",{attrs:{src:n(173)}}),t._v(" "),t._m(26),t._v(" "),a("img",{attrs:{src:n(174)}}),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),a("img",{attrs:{src:n(175)}}),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),a("p",[a("font",{staticStyle:{background:"yellow"}},[t._v("Windows和Linux下的netstat命令的配合复习")])],1),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),a("p",[a("font",{attrs:{size:"5"}},[t._v("Linux下，我们测试，服务器的命令（注意，后面的6666是端口号）")])],1),t._v(" "),t._m(34),t._m(35),t._v(" "),a("p",[t._v("图大致分3部分\n1.实线---主动发起连接，主动关闭连接（C或S都可能）\n2.虚线——被动发起/关闭连接\n3.小细线——两端同时操作部分。（同时，我们指的是它发送过来，我接收到了）")]),t._v(" "),a("p",[t._v("这个图N多人都知道，它排除和定位网络或系统故障时大有帮助，但是怎样牢牢地将这张图刻在脑中呢？那么你就一定要对这张图的每一个状态，及转换的过程有深刻的认识，不能只停留在一知半解之中。下面对这张图的11种状态详细解析一下，以便加强记忆！\nC/S通信过程中，每一个阶段和服务器，它所处于的状态。")]),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),a("p",[t._v("其实，我们也只是了解上面的那些状态中能够被程序捕捉的，因为有的状态，转瞬即逝。")]),t._v(" "),t._m(38),t._v(" "),a("p",[t._v("TIME_WAIT状态的存在有两个理由：")]),t._v(" "),t._m(39),t._v(" "),a("img",{attrs:{src:"https://gitee.com/HACV/images_bed/raw/master/MainBlog/2020/2020_08/08_08/02.png"}}),t._v(" "),t._m(40),t._v(" "),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),a("p",[t._v("从程序的角度，可以使用API来控制实现半连接状态。")]),t._v(" "),t._m(44),t._m(45),t._v(" "),a("p",[t._v("date: 2020-08-07")]),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49),t._v(" "),a("p",[t._v("借助套接字完成TCP下的C/S模型")]),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),t._m(52),t._v(" "),a("p",[t._v("为使网络程序具有可移植性，使同样的C代码在大端和小端计算机上编译后都能正常运行，可以调用以下库函数做网络字节序和主机字节序的转换。")]),t._v(" "),t._m(53),a("p",[t._v("h表示host，n表示network，l表示32位长整数，s表示16位短整数。\n32位的显然是IP，16位的是端口号。\n如果主机是小端字节序，这些函数将参数做相应的大小端转换然后返回，如果主机是大端字节序，这些函数不做转换，将参数原封不动地返回。")]),t._v(" "),t._m(54),t._v(" "),t._m(55),a("p",[t._v("支持IPv4和IPv6\n可重入函数\n其中inet_pton和inet_ntop不仅可以转换IPv4的in_addr，还可以转换IPv6的in6_addr。\n因此函数接口是void *addrptr。\naf表示你选用的IP地址版本。Ipv4和6")]),t._v(" "),a("p",[t._v("pton理解：p理解为IP，表示的是我们的字符串的IP，N表示net")]),t._v(" "),a("p",[t._v("我们日常生活中大家习惯的IP表现形式是：\n比如192.168.1.1这样的点分十进制")]),t._v(" "),a("p",[t._v("我们变成\n192.168.1.1-》unsigned int类型的数据-》（htonl）网络字节序\nLinux发现上面2步太麻烦。现在直接一步\n192.168.1.1-——————————————————————》（inet_pton）网络字节序号")]),t._v(" "),t._m(56),t._v(" "),t._m(57),t._v(" "),t._m(58),t._v(" "),a("p",[a("font",{staticStyle:{background:"yellow"},attrs:{size:"5"}},[t._v("我们现在讲的套接字默认指的是"),a("strong",[t._v("网络套接字")]),t._v("。注意，我们进程通信的是"),a("strong",[t._v("本地套接字")]),t._v("，所谓本地套接字就是不使用网络结构呗，不使用IP地址，但是端口号还是得用")])],1),t._v(" "),a("img",{attrs:{src:"https://gitee.com/HACV/images_bed/raw/master/MainBlog/2020/2020_08/08_06/01.png"}}),t._v(" "),a("p",[a("font",{staticStyle:{background:"yellow"},attrs:{size:"5"}},[t._v("上图可能疑惑点：为什么客户端没有bind呢？难度不需要绑定吗？原因：其实，你如皋没有调用，那么你的操作系统会给你"),a("strong",[t._v("自动分配")]),t._v("一个端口号和IP地址。")])],1),t._v(" "),t._m(59),t._v(" "),a("p",[t._v("要想通过socket完成通信，显然我们必须要创建套接字。")]),t._v(" "),t._m(60),t._v(" "),t._m(61),t._m(62),t._v(" "),t._m(63),t._v(" "),t._m(64),a("p",[t._v("sockfd：\nsocket文件描述符\naddr:\n构造出IP地址加端口号\naddrlen:\nsizeof(addr)长度\n返回值：\n成功返回0，失败返回-1, 设置errno")]),t._v(" "),t._m(65),t._v(" "),a("p",[a("font",{staticStyle:{background:"yellow"}},[t._v("往套接字上绑，往套接字上绑"),a("strong",[t._v("IP")]),t._v("和"),a("strong",[t._v("端口号")]),t._v("！！（都放在struct sockaddr这个结构体里面） ")])],1),t._v(" "),t._m(66),t._v(" "),a("p",[t._v("（监听，我套接字另外一端给我发送数据？？）\n上面是错误的")]),t._v(" "),a("p",[a("font",{staticStyle:{background:"yellow"}},[t._v("listen是用来指定"),a("strong",[t._v("监听上限数")]),t._v("，我只要他来指定一个数值，比如服务器启动起来后，")])],1),t._v(" "),t._m(67),t._v(" "),t._m(68),a("p",[t._v("sockfd:\nsocket文件描述符\nbacklog:\n排队建立3次握手队列和刚刚建立3次握手队列的链接数和\n查看系统默认backlog\ncat /proc/sys/net/ipv4/tcp_max_syn_backlog")]),t._v(" "),t._m(69),t._v(" "),t._m(70),t._v(" "),t._m(71),t._m(72),t._v(" "),t._m(73),t._v(" "),t._m(74),t._v(" "),t._m(75),t._m(76),t._v(" "),a("p",[t._v("客户端需要调用connect()连接服务器，connect和bind的参数形式一致\n区别在于bind的参数是自己的地址，而connect的参数是对方的地址。connect()成功返回0，出错返回-1。")]),t._v(" "),a("p",[t._v("大小写转换")]),t._v(" "),t._m(77),t._v(" "),t._m(78),t._v(" "),t._m(79),t._m(80),t._v(" "),a("p",[t._v("问题来了，如果只写了服务器端，如何测试？")]),t._v(" "),a("p",[t._v("命令")]),t._v(" "),t._m(81),a("p",[t._v("nc还有人读脑残。。。（net connect）")]),t._v(" "),a("p",[t._v("nc加上你要连接的目标IP的地址，比如说我们本机的127.0.0.1   再加上端口号")]),t._v(" "),a("p",[t._v("比如上面的程序，我们可以测试")]),t._v(" "),t._m(82),a("p",[t._v("这样就可以进行")]),t._v(" "),t._m(83),t._v(" "),t._m(84),a("p",[t._v("客户端和服务器启动后可以使用netstat命令查看链接情况：\nnetstat -apn|grep 6666")]),t._v(" "),a("p",[t._v("ARP攻击：针对你当前某一个IP地址，不断的给你发送数据包。\n那就当你当前网卡里面读取数据的那个进程给拥塞住。")]),t._v(" "),t._m(85),t._v(" "),a("p",[t._v("为使错误处理的代码不影响主程序的可读性，我们把与socket相关的一些系统函数加上错误处理代码包装成新的函数，做成一个"),a("strong",[t._v("模块")]),t._v("wrap.c："),a("font",{staticStyle:{background:"yellow"},attrs:{size:"4"}},[t._v("（也就是将我们要用到的函数重新进行封装一下，比如说listen啥的）(很好的。可以和主控程序联合编译，方式：你在程序当中要使用的所有系统调用，你都把它重命名一下，函数参数，返回值啥的都不变）")])],1),t._v(" "),a("p",[t._v("模块：.c和.h")]),t._v(" "),t._m(86),t._v(" "),a("p",[t._v("TCP网络协议在传输层\n为什么在TCP中要3次握手，究其原因：\n和网络层有关，网络层有非常强的不稳定性\n因为网络层和硬件联系比较紧密，比如说路由器的宕机或者断电\n你的网线or路由器出现问题，都会对IP这一层造成影响。\n导致数据不能正常到。")]),t._v(" "),t._m(87),t._v(" "),t._m(88),t._v(" "),a("p",[t._v("TCP是如何保证数据包的可靠传递呢？？和面向连接一词有关系\n建立通路\nTCP传递，数据包先后经过的路由器是相同的。（当然，，要是其中的路由器断掉了，那么我们两端会重新建立连接，然后重新建立新的线路）。\nUDP是不同的")]),t._v(" "),t._m(89),t._v(" "),a("p",[t._v("反正，我觉得谁打的比方叫“握手”？一点都不形象。")]),t._v(" "),a("img",{attrs:{src:"https://gitee.com/HACV/images_bed/raw/master/MainBlog/2020/2020_08/08_07/01.png"}}),t._v(" "),a("p",[t._v("1号：1000是序号，不是必须是1000，其中0表示数据包中携带了多少个字节的数据。")]),t._v(" "),a("img",{attrs:{src:"https://gitee.com/HACV/images_bed/raw/master/MainBlog/2020/2020_08/08_07/02.png"}}),t._v(" "),a("p",[t._v("问题：发送数据包必须是客户端发一个包，服务器回一个包啊？？\n实际上不一定。\n如上图，3-9那么多句，发现服务器半天不回，所以我一直发\n发现**，客户端你可以连续发多个包，我服务器，直接一条ACK回应你**")]),t._v(" "),t._m(90),t._v(" "),t._m(91),t._v(" "),a("p",[t._v("场景：你那边申请结束，我虽然同意，但是我还有部分数据没有传输完，所以，我待会再和你申请，我这边的结束")]),t._v(" "),t._m(92),t._v(" "),a("p",[t._v("虽然，IP这层设计的时候是有65535那么大，但是他会收到传输层和链路层的夹板，导致我这一个数据包，能不能带这么大的数据？？\n不能。比如，他们都比我小，我就要迁就一下他们**（难道，是几个协议封装，像板子，弄成筒子，短板效应？？对的，这个理解很好）**")]),t._v(" "),a("p",[t._v("同理，所以最后受到限制的就是以太网（链路层？？），他默认就能传，1500\n所以，虽然你IP层可以那么大，但是由于“木桶效应”，所以不能那么大。")]),t._v(" "),a("p",[t._v("其实，我们的以太网的数据包的大小，1500是符合我们日常的\n我们经常只是几KB的，所以说，1，2个数据包就过去了。\n所以，也没有必要把这个设计很大。")]),t._v(" "),a("p",[t._v("TCP还是会丢包，只是丢包，可以重传。\nUDP的话，丢包了就丢包了。")]),t._v(" "),t._m(93),t._v(" "),t._m(94),t._v(" "),t._m(95),t._v(" "),t._m(96),t._v(" "),t._m(97),t._v(" "),a("p",[t._v("介绍UDP时我们描述了这样的问题：如果发送端发送的速度较快，接收端接收到数据后处理的速度较慢，而接收缓冲区的大小是固定的，就会丢失数据。")]),t._v(" "),a("p",[t._v("UDP中有没有，滑动窗口这样的东西呢？因为我们知道，滑动窗口是在TCP数据包中记录的，但是UDP协议中，没有描述窗口这件事。")]),t._v(" "),t._m(98),t._v(" "),t._m(99),t._v(" "),t._m(100),t._v(" "),t._m(101),t._v(" "),t._m(102),t._v(" "),t._m(103),t._m(104),t._v(" "),a("ul",[a("li",[t._v("游双，《"),a("a",{attrs:{href:"https://book.douban.com/subject/24722611/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux高性能服务器编程"),a("OutboundLink")],1),t._v("》")]),t._v(" "),a("li",[t._v("陈硕，《"),a("a",{attrs:{href:"https://book.douban.com/subject/20471211/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux多线程服务端编程"),a("OutboundLink")],1),t._v("》")]),t._v(" "),a("li",[t._v("史蒂文斯 / 芬纳 / 鲁道夫，《"),a("a",{attrs:{href:"https://book.douban.com/subject/1500149/",target:"_blank",rel:"noopener noreferrer"}},[t._v("UNIX网络编程"),a("OutboundLink")],1),t._v("》")])])])}),a,!1,null,null,null);s.default=r.exports}}]);