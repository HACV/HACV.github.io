(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{216:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),n("p",[n("strong",[t._v("进程")]),t._v("是"),n("strong",[t._v("资源管理")]),t._v("的最小单位"),n("br"),t._v(" "),n("strong",[t._v("线程")]),t._v("是"),n("strong",[t._v("程序执行")]),t._v("的最小单位。"),n("br"),t._v("\n记忆方法："),n("br"),t._v(" "),n("font",{staticStyle:{background:"yellow"}},[t._v("大Boss（进程），只管拿着资源统筹兼顾。\n小兵（线程），要卖力执行命令。")])],1),t._v(" "),t._m(2),t._v(" "),n("blockquote",[t._m(3),t._v(" "),n("blockquote",[n("ul",[n("li",[n("font",{staticStyle:{background:"yellow"}},[t._v("Windows内核中有明确的"),n("b",[t._v("进程")]),t._v("和"),n("b",[t._v("线程")]),t._v("的概念")])],1)])]),t._v(" "),t._m(4),t._v(" "),n("blockquote",[n("ul",[n("li",[t._v("Linux将所有的执行实体（无论是进程还是线程）都称为"),n("font",{staticStyle:{background:"yellow"}},[n("b",[t._v("任务（Task）")])])],1),t._v(" "),t._m(5),t._v(" "),t._m(6)]),t._v(" "),t._m(7)])]),t._v(" "),t._m(8),t._v(" "),n("p",[n("font",{attrs:{color:"red",size:"5"}},[t._v("（记得到时候加上代码）")]),t._v("\n为了避免多个线程同时读写同一个数据而产生不可预料的后果,我们需要将各个线程对同一个数据的访问同步（Synchronization）。\n所谓同步，既是指在一个线程访问数据未结束的时候，其他线程不得对同一个数据进行访问。")],1),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),n("blockquote",[n("ul",[n("li",[n("font",{staticStyle:{background:"yellow"},attrs:{type:"楷体",size:"5"}},[t._v("（1）信号量")])],1)]),t._v(" "),n("blockquote",[n("ul",[n("li",[n("font",{staticStyle:{background:"yellow"}},[n("b",[t._v("（严格程度：低）二元信号量（Binary Semaphore）")])]),t._v("是最简单的一种锁，它只有两种状态:占用与非占用。它适合只能被唯一个线程独占访问的资源。当二元信号量处于非占用状态时，第一个试图获取该二元信号量的线程会获得该锁，并将二元信号量置为占用状态，此后其他的所有试图获取该二元信号量的线程将会等待，直到该锁被释放。")],1),t._v(" "),t._m(11)]),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14)])]),t._v(" "),n("blockquote",[n("ul",[n("li",[n("font",{staticStyle:{background:"yellow"}},[n("b",[t._v("（严格程度：中）互斥量（Mutex）")])]),t._v("和"),n("b",[t._v("二元信号量")]),t._v("很类似，资源仅同时允许一个线程访问，但和信号量不同的是:")],1)]),t._v(" "),n("blockquote",[n("ul",[n("li",[t._v("1）"),n("b",[t._v("信号量")]),t._v("在整个系统可以被任意线程获取并释放，也就是说，同一个信号量可以被系统中的一个线程获取之后的"),n("font",{staticStyle:{background:"yellow"}},[t._v("另一个线程")]),t._v("释放。")],1),t._v(" "),t._m(15)])])]),t._v(" "),n("blockquote",[n("ul",[n("li",[n("font",{staticStyle:{background:"yellow"}},[n("b",[t._v("（严格程度：高）临界区（Critical Section）")])]),t._v("是比"),n("b",[t._v("互斥量")]),t._v("更加严格的同步手段。")],1)]),t._v(" "),n("blockquote",[t._m(16),t._v(" "),n("blockquote",[n("ul",[n("li",[t._v("1）"),n("b",[t._v("互斥量和信号量")]),t._v("在系统的"),n("font",{staticStyle:{background:"yellow"}},[n("b",[t._v("任何进程")])]),t._v("里都是可见的，也就是说，一个进程创建了一个互斥量或信号量,另一个进程试图去获取该锁是合法的。")],1),t._v(" "),n("li",[t._v("2）"),n("b",[t._v("临界区")]),t._v("的作用范围"),n("font",{staticStyle:{background:"yellow"}},[n("b",[t._v("仅限于本进程")])]),t._v("，其他的进程无法获取该锁。除此之外，临界区具有和互斥量相同的性质。")],1)])])])]),t._v(" "),n("blockquote",[n("ul",[n("li",[n("font",{staticStyle:{background:"yellow"},attrs:{type:"楷体",size:"5"}},[t._v("（2）")]),n("font",{staticStyle:{background:"yellow"}},[n("b",[t._v("读写锁（Read-Write Lock）")])])],1)]),t._v(" "),t._m(17)]),t._v(" "),n("blockquote",[n("ul",[n("li",[n("font",{staticStyle:{background:"yellow"},attrs:{type:"楷体",size:"5"}},[t._v("（3）")]),n("font",{staticStyle:{background:"yellow"}},[n("b",[t._v("条件变量（Condition Variable）")])]),t._v(" 作为一种同步手段，作用类似于一个栅栏。")],1)]),t._v(" "),t._m(18)]),t._v(" "),t._m(19),t._v(" "),n("p",[t._v("下文参考自："),n("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI1NTE3OTk4Nw==&mid=2653734974&idx=1&sn=987f9a4cfea1c830036ae20fc04866d5&chksm=f1e18582c6960c941a5e147c198d9cbc3f27e88dbb82fb62f0d23261821070bd43bdfd2fc2b2&mpshare=1&scene=23&srcid=0728Ab0PK8WsIZWsv1UoVm8L&sharer_sharetime=1595948760667&sharer_shareid=7d02bdfe8ee477ab2b773f2df63f3163#rd",target:"_blank",rel:"noopener noreferrer"}},[t._v("链接"),n("OutboundLink")],1)]),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),n("p",[t._v("计算机中的终端：\n是所有输入输出设备的总称。\n键盘，鼠标，摄像头\n屏幕，打印机")]),t._v(" "),n("p",[t._v("虚拟机那个黑框框。是终端，是虚拟终端，不是真实存在的\n输入可以在这，输出也在这出，又输入有输出")]),t._v(" "),t._m(28),t._v(" "),n("p",[t._v("init进程是1号进程，所有进程原先的祖先\n0号进程是不会在操作系统中实际存在的。")]),t._v(" "),t._m(29),t._v(" "),n("p",[t._v("（有的书上叫“作业”，重要！！）只不过在不同操作系统下，叫法不同而已。\n作业这个概念，早先的时候，来源于BSD操作系统")]),t._v(" "),t._m(30),t._v(" "),n("p",[t._v("可以用kill，进行进程组ID取负号的方式，来杀死整个组内的进程。")]),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),n("p",[t._v("把一组进程组再重新编号，就变成了会话。。。（圈圈圆圆圈圈，禁止套娃2333）")]),t._v(" "),n("p",[t._v("创建一个会话需要注意以下6点注意事项：")]),t._v(" "),t._m(33),t._v(" "),n("p",[t._v("要会话ID干啥？？主要是为了，守护进程用")]),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),n("p",[t._v("创建守护进程，最关键的一步是调用setsid函数创建一个新的Session，并成为Session Leader。")]),t._v(" "),t._m(36),t._v(" "),t._m(37),n("p",[t._v("这是bash解析器的配置文件，每次加载bash的时候都是按照这个去走。\n显然设置这个，就可以让完成那样的守护进程。启动放这个里面。")]),t._v(" "),n("p",[t._v("为什么，要用会话呢？\n因为守护进程都不需要控制终端。")]),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),n("p",[t._v("比如，我们可以写个这样的守护进程\n每隔2秒，把当前系统的时间打印，写到一个文件里面。")]),t._v(" "),t._m(42),t._v(" "),t._m(43)])}),[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"os重要概念辨析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#os重要概念辨析"}},[this._v("#")]),this._v(" OS重要概念辨析")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"一、进程和线程中的同步机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、进程和线程中的同步机制"}},[this._v("#")]),this._v(" 一、进程和线程中的同步机制")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_1、进程和线程在两大操作系统的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、进程和线程在两大操作系统的特点"}},[this._v("#")]),this._v(" 1、进程和线程在两大操作系统的特点")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("Windows对进程和线程的实现如同教科书一般标准。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("Linux内核中"),s("b",[this._v("并不存在真正意义上")]),this._v("的"),s("b",[this._v("线程")]),this._v("的概念")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("b",[this._v("每个Task概念上都类似于一个单线程的进程")]),this._v("，具有内存空间、执行实体、文件资源等。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[this._v("不过,"),s("b",[this._v("Linux下不同的任务之间可以选择共享内存空间")]),this._v("，因而在实际意义上，共享了同一个内存空间的多个任务构成了一个进程， 这些任务也就成了这个进程里的线程。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("ul",[s("li",[this._v("Linux下的线程本质上用进程实现;（题目）")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_2、线程安全"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、线程安全"}},[this._v("#")]),this._v(" 2、线程安全")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("同步的"),s("b",[this._v("最常见方法")]),this._v("是使用"),s("b",[this._v("锁（Lock）")]),this._v("（虽然，现在我也没看到目前哪本书上，还有除锁之外的，我还需要查询，后补充）。锁是一种非强制机制，每一个线程在访问数据或资源之前首先试图获取（Acquire）锁，并在访问结束之后释放(Release)锁。在锁已经被占用的时候试图获取锁时，线程会等待，直到锁重新可用。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"同步的各种锁："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步的各种锁："}},[this._v("#")]),this._v(" 同步的各种锁：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[this._v("对于"),s("b",[this._v("允许多个线程并发访问")]),this._v("的资源，"),s("b",[this._v("多元信号量简称信号量(Semaphore)")]),this._v(",它是一个很好的选择。一个初始值为N的信号量允许N个线程并发访问。线程访问资源的时候首先获取信号量，进行如下操作:")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("ul",[s("li",[this._v("将信号量的值减1。")]),this._v(" "),s("li",[this._v("如果信号量的值小于0，则进入等待状态，否则继续执行。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("访问完资源之后，线程释放信号量，进行如下操作:")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("ul",[s("li",[this._v("将信号量的值加1。")]),this._v(" "),s("li",[this._v("如果信号量的值小于1,唤醒-一个等待中的线程。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[this._v("2）"),s("b",[this._v("互斥量")]),this._v("则要求哪个线程获取了互斥量，哪个线程就要负责释放这个锁，其他线程越俎代庖去释放互斥量是无效的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("在术语中，把临界区的锁的获取称为进入临界区,而把锁的程放称为离开临界区。")]),this._v(" "),s("li",[this._v("临界区和互斥量与信号量的区别在于:")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("blockquote",[n("ul",[n("li",[t._v("由来：对于一段数据，多个线程同时读取总是没有问题的，但假设操作都不是原子型，只要有任何一个线程试图对这个数据进行修改，就必须使用同步手段来避免出错。如果我们使用上述信号量、互斥量或临界区中的任何一种来进行同步，尽管可以保证程序正确，但"),n("b",[t._v("对于读取频繁，而仅仅偶尔写入的情况")]),t._v("，会显得非常低效。")]),t._v(" "),n("li",[t._v("读写锁(Read-Write Lock)致力于一种更加特定的场合的同步:"),n("b",[t._v("读取频繁，偶尔写入的情况")])]),t._v(" "),n("li",[t._v("读写锁可以避免这个问题。对于同一个锁，读写锁有两种获取方式，"),n("b",[t._v("共享的(Shared)")]),t._v("或"),n("b",[t._v("独占(Exclusive)")]),t._v("。")])]),t._v(" "),n("blockquote",[n("ul",[n("li",[t._v("当锁处于自由的状态时，试图以任何一种方式获取锁都能成功，并将锁置于对应的状态。")]),t._v(" "),n("li",[t._v("如果锁处于共享状态，其他线程以共享的方式获取锁仍然会成功，此时这个锁分配给了多个线程。然而，如果其他线程试图以独身的方式获取已经处于共享状态的锁，那么它将必须等待锁被所有的线程释放。")]),t._v(" "),n("li",[t._v("相应地，处于独占状态的锁将阻止任何其他线程获取该锁，不论它们试图以哪种方式获取。")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("ul",[s("li",[this._v("对于条件变量，线程可以有两种操作，首先线程可以等待条件变量，一个条件变量可以被多个线程等待。")]),this._v(" "),s("li",[this._v("其次，线程可以唤醒条件变量,此时某个或所有等待此条件变量的线程都会被唤醒并继续支持。也就是说，使用条件变量可以让许多线程-起等待某个事件的发生，当事件发生时(条件变量被唤醒)，所有的线程可以一起恢复执行。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_3、线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、线程池"}},[this._v("#")]),this._v(" 3、线程池")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"（1）什么是线程池？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）什么是线程池？"}},[this._v("#")]),this._v(" （1）什么是线程池？")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("实际开发中我们需要让程序执行某个特定任务时，就会开启一个线程，如果并发的线程数量太多，频繁地创建线程就会严重影响系统的运行效率。"),s("br"),this._v("\n如何解决上述为呢？有没有一种方式可以让线程得到复用？"),s("br"),this._v("\n也就是要求执行一次任务之后不被销毁，可以继续执行其他任务，这就跟“数据库连接池”的思路一样了，数据库连接池的实现逻辑是在缓冲池中预先放置一定数量的连接对象，然后进行复用，那么很显然，在缓冲池中"),s("b",[this._v("预先放置一定数量的线程对象")]),this._v("以实现复用的机制就叫做线程池。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"（2）线程池的优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（2）线程池的优点"}},[this._v("#")]),this._v(" （2）线程池的优点")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("1、使用线程池可以减少创建和销毁线程的次数，每个工作线程都可以重复使用。"),s("br"),this._v("\n2、可以根据系统的承受能力，调整线程池中工作线程的数量，防止因为消耗过多内存导致服务器崩溃。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"（3）工作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（3）工作流程"}},[this._v("#")]),this._v(" （3）工作流程")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("1、提交一个任务时，线程池会创建一个新的线程执行任务，直到当前线程数等于"),n("code",[t._v("corePoolSize")]),t._v("。"),n("br"),t._v("\n2、如果当前线程数为"),n("code",[t._v("corePoolSize")]),t._v("，继续提交的任务被保存到任务队列中，等待被执行。"),n("br"),t._v("\n3、如果"),n("strong",[t._v("任务队列满了")]),t._v("，那就创建新的线程执行当前任务，直到线程池中的线程数达到 "),n("code",[t._v("maxPoolSize")]),t._v("，这时再有任务来，只能执行"),n("code",[t._v("reject()")]),t._v("拒绝处理该任务。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_4、『xx池』概念的来源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、『xx池』概念的来源"}},[this._v("#")]),this._v(" 4、『XX池』概念的来源")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"二、终端"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、终端"}},[this._v("#")]),this._v(" 二、终端")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("ul",[s("li",[this._v("终端在我们系统的级别分，大致如下：")]),this._v(" "),s("li",[this._v("Alt + Ctrl + F1、F2、F3、F4、F5、F6\t字符终端   pts (pseudo terminal slave) 指伪终端。")]),this._v(" "),s("li",[this._v("Alt + F7\t\t图形终端")]),this._v(" "),s("li",[this._v("SSH、Telnet...\t\t网络终端（比如用Xshell啥的，通过网络传输到主机上）")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"三、进程组（作业task）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、进程组（作业task）"}},[this._v("#")]),this._v(" 三、进程组（作业task）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("ul",[s("li",[this._v("BSD于1980年前后向Unix中增加的一个新特性。代表一个或多个进程的集合。每个进程都属于一个进程组。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("ul",[s("li",[this._v("组长进程可以创建一个进程组")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"四、会话（session）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、会话（session）"}},[this._v("#")]),this._v(" 四、会话（session）")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ol",[n("li",[t._v("调用进程不能是进程组组长，该进程变成新会话首进程(session header)（简称，“会长”，滑稽）")]),t._v(" "),n("li",[t._v("该进程成为一个新进程组的组长进程。")]),t._v(" "),n("li",[t._v("需有root权限(ubuntu不需要)")]),t._v(" "),n("li",[t._v("新会话丢弃原有的控制终端，该会话没有控制终端（只在后台执行）")]),t._v(" "),n("li",[t._v("该调用进程是组长进程，则出错返回")]),t._v(" "),n("li",[t._v("建立新会话时，先调用fork, 父进程终止，子进程调用setsid")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"五、守护进程（重要）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、守护进程（重要）"}},[this._v("#")]),this._v(" 五、守护进程（重要）")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("blockquote",[n("ul",[n("li",[t._v("Daemon(精灵)进程，是Linux中的"),n("strong",[t._v("后台服务进程")]),t._v("，通常独立于控制终端并且周"),n("strong",[t._v("期性地")]),t._v("执行某种任务或等待处理某些发生的事件。一般采用以d结尾的名字。")])]),t._v(" "),n("blockquote",[n("ul",[n("li",[t._v("比如，Linux中的vsftpd，搭建ftp服务器的，安装+启动，，httpd，sshd,xinetd")])])]),t._v(" "),n("ul",[n("li",[t._v("只要是后台的，有没有终端？？没有。")]),t._v(" "),n("li",[t._v("这个，守护进程，说白了，就是一个后台系统服务器。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("b",[this._v("注意，守护进程不受，不受用户登录、注销的影响，当然，机器重启就另说了,但是厉害的守护进程，比如vsftpd和mysql等，你关机再开机，它也跟着启动")]),this._v("\n当然，你也可以写这样的守护进程，比")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[this._v("vim")]),this._v(" .bashrc\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（1）创建守护进程模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）创建守护进程模型"}},[this._v("#")]),this._v(" （1）创建守护进程模型")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ol",[n("li",[t._v("创建子进程，父进程退出\n所有工作在子进程中进行形式上脱离了控制终端")]),t._v(" "),n("li",[t._v("在子进程中创建新会话（主要，为了丢弃终端）\n　　\tsetsid()函数\n　　\t使子进程完全独立出来，脱离控制")]),t._v(" "),n("li",[t._v("改变当前目录为根目录\n　　\tchdir()函数\n　　\t防止占用可卸载的文件系统（比如，U盘）\n　　\t也可以换成其它路径")]),t._v(" "),n("li",[t._v("重设文件权限掩码\n　　\tumask()函数\n　　\t防止继承的文件创建屏蔽字拒绝某些权限\n　　\t增加守护进程灵活性")]),t._v(" "),n("li",[t._v("关闭文件描述符\n　　\t继承的打开文件不会用到，浪费系统资源，无法卸载")]),t._v(" "),n("li",[t._v("开始执行守护进程核心工作（守护进程主逻辑）")]),t._v(" "),n("li",[t._v("守护进程退出处理程序模型\t\t（几乎不会用，毕竟守护进程一般不退出）")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（2）写一个守护进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（2）写一个守护进程"}},[this._v("#")]),this._v(" （2）写一个守护进程")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdlib.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<fcntl.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/stat.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("mydaemond")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1.创建子进程")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" pid "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2.在子进程中创建新会话")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setsid")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3.\t改变当前目录为根目录")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ret "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("chdir")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/home/itcast/"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("perror")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"chdir error"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// chdir error no such diractroy or file")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//4.重设文件权限掩码")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("umask")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0022")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//5.关闭文件描述符")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//close(fd[0]);  //stdin")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("STDIN_FILENO"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/dev/null"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" O_RDWR"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("dup2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" STDOUT_FILENO"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("dup2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" STDERR_FILENO"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("mydaemond")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//6.开始执行守护进程核心工作（守护进程主逻辑）")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        \n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//7.退出的话，需要在这注册一个信号捕捉")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br"),n("span",{staticClass:"line-number"},[t._v("35")]),n("br"),n("span",{staticClass:"line-number"},[t._v("36")]),n("br"),n("span",{staticClass:"line-number"},[t._v("37")]),n("br"),n("span",{staticClass:"line-number"},[t._v("38")]),n("br"),n("span",{staticClass:"line-number"},[t._v("39")]),n("br"),n("span",{staticClass:"line-number"},[t._v("40")]),n("br"),n("span",{staticClass:"line-number"},[t._v("41")]),n("br"),n("span",{staticClass:"line-number"},[t._v("42")]),n("br"),n("span",{staticClass:"line-number"},[t._v("43")]),n("br"),n("span",{staticClass:"line-number"},[t._v("44")]),n("br"),n("span",{staticClass:"line-number"},[t._v("45")]),n("br"),n("span",{staticClass:"line-number"},[t._v("46")]),n("br"),n("span",{staticClass:"line-number"},[t._v("47")]),n("br"),n("span",{staticClass:"line-number"},[t._v("48")]),n("br"),n("span",{staticClass:"line-number"},[t._v("49")]),n("br"),n("span",{staticClass:"line-number"},[t._v("50")]),n("br"),n("span",{staticClass:"line-number"},[t._v("51")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[this._v("#")]),this._v(" 参考资料")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("《linux》")])])}],!1,null,null,null);s.default=e.exports}}]);