(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{217:function(t,e,_){"use strict";_.r(e);var s=_(0),i=Object(s.a)({},(function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),_("p",[_("strong",[t._v("进程")]),t._v("是"),_("strong",[t._v("资源管理")]),t._v("的最小单位"),_("br"),t._v(" "),_("strong",[t._v("线程")]),t._v("是"),_("strong",[t._v("程序执行")]),t._v("的最小单位。"),_("br"),t._v("\n记忆方法："),_("br"),t._v(" "),_("font",{staticStyle:{background:"yellow"}},[t._v("大Boss（进程），只管拿着资源统筹兼顾。\n小兵（线程），要卖力执行命令。")])],1),t._v(" "),t._m(2),t._v(" "),_("blockquote",[t._m(3),t._v(" "),_("blockquote",[_("ul",[_("li",[_("font",{staticStyle:{background:"yellow"}},[t._v("Windows内核中有明确的"),_("b",[t._v("进程")]),t._v("和"),_("b",[t._v("线程")]),t._v("的概念")])],1)])]),t._v(" "),t._m(4),t._v(" "),_("blockquote",[_("ul",[_("li",[t._v("Linux将所有的执行实体（无论是进程还是线程）都称为"),_("font",{staticStyle:{background:"yellow"}},[_("b",[t._v("任务（Task）")])])],1),t._v(" "),t._m(5),t._v(" "),t._m(6)]),t._v(" "),t._m(7)])]),t._v(" "),t._m(8),t._v(" "),_("p",[_("font",{attrs:{color:"red",size:"5"}},[t._v("（记得到时候加上代码）")]),t._v("\n为了避免多个线程同时读写同一个数据而产生不可预料的后果,我们需要将各个线程对同一个数据的访问同步（Synchronization）。\n所谓同步，既是指在一个线程访问数据未结束的时候，其他线程不得对同一个数据进行访问。")],1),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),_("blockquote",[_("ul",[_("li",[_("font",{staticStyle:{background:"yellow"},attrs:{type:"楷体",size:"5"}},[t._v("（1）信号量")])],1)]),t._v(" "),_("blockquote",[_("ul",[_("li",[_("font",{staticStyle:{background:"yellow"}},[_("b",[t._v("（严格程度：低）二元信号量（Binary Semaphore）")])]),t._v("是最简单的一种锁，它只有两种状态:占用与非占用。它适合只能被唯一个线程独占访问的资源。当二元信号量处于非占用状态时，第一个试图获取该二元信号量的线程会获得该锁，并将二元信号量置为占用状态，此后其他的所有试图获取该二元信号量的线程将会等待，直到该锁被释放。")],1),t._v(" "),t._m(11)]),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14)])]),t._v(" "),_("blockquote",[_("ul",[_("li",[_("font",{staticStyle:{background:"yellow"}},[_("b",[t._v("（严格程度：中）互斥量（Mutex）")])]),t._v("和"),_("b",[t._v("二元信号量")]),t._v("很类似，资源仅同时允许一个线程访问，但和信号量不同的是:")],1)]),t._v(" "),_("blockquote",[_("ul",[_("li",[t._v("1）"),_("b",[t._v("信号量")]),t._v("在整个系统可以被任意线程获取并释放，也就是说，同一个信号量可以被系统中的一个线程获取之后的"),_("font",{staticStyle:{background:"yellow"}},[t._v("另一个线程")]),t._v("释放。")],1),t._v(" "),t._m(15)])])]),t._v(" "),_("blockquote",[_("ul",[_("li",[_("font",{staticStyle:{background:"yellow"}},[_("b",[t._v("（严格程度：高）临界区（Critical Section）")])]),t._v("是比"),_("b",[t._v("互斥量")]),t._v("更加严格的同步手段。")],1)]),t._v(" "),_("blockquote",[t._m(16),t._v(" "),_("blockquote",[_("ul",[_("li",[t._v("1）"),_("b",[t._v("互斥量和信号量")]),t._v("在系统的"),_("font",{staticStyle:{background:"yellow"}},[_("b",[t._v("任何进程")])]),t._v("里都是可见的，也就是说，一个进程创建了一个互斥量或信号量,另一个进程试图去获取该锁是合法的。")],1),t._v(" "),_("li",[t._v("2）"),_("b",[t._v("临界区")]),t._v("的作用范围"),_("font",{staticStyle:{background:"yellow"}},[_("b",[t._v("仅限于本进程")])]),t._v("，其他的进程无法获取该锁。除此之外，临界区具有和互斥量相同的性质。")],1)])])])]),t._v(" "),_("blockquote",[_("ul",[_("li",[_("font",{staticStyle:{background:"yellow"},attrs:{type:"楷体",size:"5"}},[t._v("（2）")]),_("font",{staticStyle:{background:"yellow"}},[_("b",[t._v("读写锁（Read-Write Lock）")])])],1)]),t._v(" "),t._m(17)]),t._v(" "),_("blockquote",[_("ul",[_("li",[_("font",{staticStyle:{background:"yellow"},attrs:{type:"楷体",size:"5"}},[t._v("（3）")]),_("font",{staticStyle:{background:"yellow"}},[_("b",[t._v("条件变量（Condition Variable）")])]),t._v(" 作为一种同步手段，作用类似于一个栅栏。")],1)]),t._v(" "),t._m(18)]),t._v(" "),t._m(19),t._v(" "),_("p",[t._v("下文参考自："),_("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI1NTE3OTk4Nw==&mid=2653734974&idx=1&sn=987f9a4cfea1c830036ae20fc04866d5&chksm=f1e18582c6960c941a5e147c198d9cbc3f27e88dbb82fb62f0d23261821070bd43bdfd2fc2b2&mpshare=1&scene=23&srcid=0728Ab0PK8WsIZWsv1UoVm8L&sharer_sharetime=1595948760667&sharer_shareid=7d02bdfe8ee477ab2b773f2df63f3163#rd",target:"_blank",rel:"noopener noreferrer"}},[t._v("链接"),_("OutboundLink")],1)]),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28)])}),[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"os重要概念辨析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#os重要概念辨析"}},[this._v("#")]),this._v(" OS重要概念辨析")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"一、进程和线程中的同步机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、进程和线程中的同步机制"}},[this._v("#")]),this._v(" 一、进程和线程中的同步机制")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_1、进程和线程在两大操作系统的特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、进程和线程在两大操作系统的特点"}},[this._v("#")]),this._v(" 1、进程和线程在两大操作系统的特点")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("Windows对进程和线程的实现如同教科书一般标准。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("Linux内核中"),e("b",[this._v("并不存在真正意义上")]),this._v("的"),e("b",[this._v("线程")]),this._v("的概念")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("b",[this._v("每个Task概念上都类似于一个单线程的进程")]),this._v("，具有内存空间、执行实体、文件资源等。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[this._v("不过,"),e("b",[this._v("Linux下不同的任务之间可以选择共享内存空间")]),this._v("，因而在实际意义上，共享了同一个内存空间的多个任务构成了一个进程， 这些任务也就成了这个进程里的线程。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("ul",[e("li",[this._v("Linux下的线程本质上用进程实现;（题目）")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_2、线程安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、线程安全"}},[this._v("#")]),this._v(" 2、线程安全")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("同步的"),e("b",[this._v("最常见方法")]),this._v("是使用"),e("b",[this._v("锁（Lock）")]),this._v("（虽然，现在我也没看到目前哪本书上，还有除锁之外的，我还需要查询，后补充）。锁是一种非强制机制，每一个线程在访问数据或资源之前首先试图获取（Acquire）锁，并在访问结束之后释放(Release)锁。在锁已经被占用的时候试图获取锁时，线程会等待，直到锁重新可用。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"同步的各种锁："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#同步的各种锁："}},[this._v("#")]),this._v(" 同步的各种锁：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[this._v("对于"),e("b",[this._v("允许多个线程并发访问")]),this._v("的资源，"),e("b",[this._v("多元信号量简称信号量(Semaphore)")]),this._v(",它是一个很好的选择。一个初始值为N的信号量允许N个线程并发访问。线程访问资源的时候首先获取信号量，进行如下操作:")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("ul",[e("li",[this._v("将信号量的值减1。")]),this._v(" "),e("li",[this._v("如果信号量的值小于0，则进入等待状态，否则继续执行。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("访问完资源之后，线程释放信号量，进行如下操作:")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("ul",[e("li",[this._v("将信号量的值加1。")]),this._v(" "),e("li",[this._v("如果信号量的值小于1,唤醒-一个等待中的线程。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[this._v("2）"),e("b",[this._v("互斥量")]),this._v("则要求哪个线程获取了互斥量，哪个线程就要负责释放这个锁，其他线程越俎代庖去释放互斥量是无效的。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("在术语中，把临界区的锁的获取称为进入临界区,而把锁的程放称为离开临界区。")]),this._v(" "),e("li",[this._v("临界区和互斥量与信号量的区别在于:")])])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("blockquote",[_("ul",[_("li",[t._v("由来：对于一段数据，多个线程同时读取总是没有问题的，但假设操作都不是原子型，只要有任何一个线程试图对这个数据进行修改，就必须使用同步手段来避免出错。如果我们使用上述信号量、互斥量或临界区中的任何一种来进行同步，尽管可以保证程序正确，但"),_("b",[t._v("对于读取频繁，而仅仅偶尔写入的情况")]),t._v("，会显得非常低效。")]),t._v(" "),_("li",[t._v("读写锁(Read-Write Lock)致力于一种更加特定的场合的同步:"),_("b",[t._v("读取频繁，偶尔写入的情况")])]),t._v(" "),_("li",[t._v("读写锁可以避免这个问题。对于同一个锁，读写锁有两种获取方式，"),_("b",[t._v("共享的(Shared)")]),t._v("或"),_("b",[t._v("独占(Exclusive)")]),t._v("。")])]),t._v(" "),_("blockquote",[_("ul",[_("li",[t._v("当锁处于自由的状态时，试图以任何一种方式获取锁都能成功，并将锁置于对应的状态。")]),t._v(" "),_("li",[t._v("如果锁处于共享状态，其他线程以共享的方式获取锁仍然会成功，此时这个锁分配给了多个线程。然而，如果其他线程试图以独身的方式获取已经处于共享状态的锁，那么它将必须等待锁被所有的线程释放。")]),t._v(" "),_("li",[t._v("相应地，处于独占状态的锁将阻止任何其他线程获取该锁，不论它们试图以哪种方式获取。")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("ul",[e("li",[this._v("对于条件变量，线程可以有两种操作，首先线程可以等待条件变量，一个条件变量可以被多个线程等待。")]),this._v(" "),e("li",[this._v("其次，线程可以唤醒条件变量,此时某个或所有等待此条件变量的线程都会被唤醒并继续支持。也就是说，使用条件变量可以让许多线程-起等待某个事件的发生，当事件发生时(条件变量被唤醒)，所有的线程可以一起恢复执行。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_3、线程池"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、线程池"}},[this._v("#")]),this._v(" 3、线程池")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_1）什么是线程池？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1）什么是线程池？"}},[this._v("#")]),this._v(" 1）什么是线程池？")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("实际开发中我们需要让程序执行某个特定任务时，就会开启一个线程，如果并发的线程数量太多，频繁地创建线程就会严重影响系统的运行效率。"),e("br"),this._v("\n如何解决上述为呢？有没有一种方式可以让线程得到复用？"),e("br"),this._v("\n也就是要求执行一次任务之后不被销毁，可以继续执行其他任务，这就跟“数据库连接池”的思路一样了，数据库连接池的实现逻辑是在缓冲池中预先放置一定数量的连接对象，然后进行复用，那么很显然，在缓冲池中"),e("b",[this._v("预先放置一定数量的线程对象")]),this._v("以实现复用的机制就叫做线程池。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_2）线程池的优点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2）线程池的优点"}},[this._v("#")]),this._v(" 2）线程池的优点")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("1、使用线程池可以减少创建和销毁线程的次数，每个工作线程都可以重复使用。"),e("br"),this._v("\n2、可以根据系统的承受能力，调整线程池中工作线程的数量，防止因为消耗过多内存导致服务器崩溃。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_3）工作流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3）工作流程"}},[this._v("#")]),this._v(" 3）工作流程")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("p",[t._v("1、提交一个任务时，线程池会创建一个新的线程执行任务，直到当前线程数等于"),_("code",[t._v("corePoolSize")]),t._v("。"),_("br"),t._v("\n2、如果当前线程数为"),_("code",[t._v("corePoolSize")]),t._v("，继续提交的任务被保存到任务队列中，等待被执行。"),_("br"),t._v("\n3、如果"),_("strong",[t._v("任务队列满了")]),t._v("，那就创建新的线程执行当前任务，直到线程池中的线程数达到 "),_("code",[t._v("maxPoolSize")]),t._v("，这时再有任务来，只能执行"),_("code",[t._v("reject()")]),t._v("拒绝处理该任务。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_4、『xx池』概念的来源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、『xx池』概念的来源"}},[this._v("#")]),this._v(" 4、『XX池』概念的来源")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[this._v("#")]),this._v(" 参考资料")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("《linux》")])])}],!1,null,null,null);e.default=i.exports}}]);