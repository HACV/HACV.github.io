(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{178:function(t,s,n){t.exports=n.p+"assets/img/成员变量和非成员变量.42a8c1de.png"},179:function(t,s,n){t.exports=n.p+"assets/img/成员函数和非成员函数.f80615b8.png"},267:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._m(9),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),a("img",{attrs:{src:n(178)}}),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),a("blockquote",[a("p",[t._v("参考自："),a("a",{attrs:{href:"https://www.huaweicloud.com/articles/4637f3d11eb3fd9a38e017041e23e50a.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("华为云"),a("OutboundLink")],1)])]),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),a("img",{attrs:{src:n(179)}}),t._v(" "),a("blockquote",[a("p",[t._v("我的"),a("a",{attrs:{href:"http://naotu.baidu.com/file/02d2413a51829d0c29226a23718613ad?token=d83f2eb1c2d887a6",target:"_blank",rel:"noopener noreferrer"}},[t._v("百度脑图"),a("OutboundLink")],1)]),t._v(" "),t._m(29)]),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._m(33),t._v(" "),a("ul",[t._m(34),t._v(" "),t._m(35),t._v(" "),a("li",[a("p",[t._v("🐾"),a("font",{staticStyle:{background:"yellow"}},[t._v("无法继承的『static成员函数』")])],1)]),t._v(" "),t._m(36),t._v(" "),t._m(37)]),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),t._v(" "),a("p",[t._v("书中说道："),a("font",{staticStyle:{background:"blue"}},[t._v("C++支持3种类型的**（member function）成员函数**")]),t._v("『记住下面的』")],1),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),a("ul",[t._m(44),t._v(" "),a("li",[a("font",{staticStyle:{background:"yellow"}},[t._v("所以"),a("strong",[t._v("在成员函数")]),t._v("中，"),a("strong",[t._v("static")]),t._v("和"),a("strong",[t._v("const不能同时")]),t._v("修饰同一个成员函数")]),t._v("，因为static成员函数没有this指针。")],1)]),t._v(" "),t._m(45),t._m(46),t._v(" "),t._m(47),t._v(" "),a("ul",[a("li",[t._v("注意："),a("font",{staticStyle:{background:"yellow"}},[t._v("友元函数不是类的成员函数！")]),t._v("（"),a("strong",[t._v("欢聚时代")]),t._v("）")],1)]),t._v(" "),t._m(48),t._v(" "),t._m(49),t._v(" "),t._m(50),t._v(" "),a("blockquote",[a("p",[t._v("参考自：菜鸟教程"),a("a",{attrs:{href:"https://www.runoob.com/cplusplus/cpp-friend-functions.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("C++ 友元函数"),a("OutboundLink")],1)])]),t._v(" "),t._m(51),t._v(" "),a("p",[t._v("『『"),a("font",{staticStyle:{background:"yellow"}},[t._v("友元函数是不能被继承的")]),t._v("——解释，你父亲的朋友不能继承给你？』』，"),a("font",{staticStyle:{background:"yellow"}},[t._v("友元函数没有this指针")]),t._v("\n友元只是破坏了类的隐藏性和封装性，"),a("font",{staticStyle:{background:"yellow"}},[t._v("可以直接调用，不需要通过对象或者指针")])],1),t._v(" "),t._m(52),t._v(" "),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),t._v(" "),t._m(56),t._v(" "),t._m(57),t._m(58),t._v(" "),t._m(59),t._v(" "),a("p",[t._v("分为：")]),t._v(" "),t._m(60),t._v(" "),t._m(61),t._m(62),t._v(" "),t._m(63),t._v(" "),t._m(64),t._v(" "),t._m(65),t._v(" "),t._m(66),t._v(" "),t._m(67),t._v(" "),t._m(68),t._v(" "),t._m(69),t._m(70),t._v(" "),t._m(71),t._v(" "),t._m(72),t._v(" "),t._m(73),t._v(" "),t._m(74),t._v(" "),a("ul",[t._m(75),t._v(" "),a("li",[a("strong",[t._v("重定义")]),t._v("：也叫做隐藏，子类"),a("strong",[t._v("重新定义")]),t._v("父类中有相同名称的"),a("font",{staticStyle:{background:"yellow"}},[t._v("『"),a("strong",[t._v("非虚函数")]),t._v("』 ")]),t._v("( 参数列表可以不同 ) ，指派生类的函数屏蔽了与其同名的基类函数。可以理解成发生在继承中的重载。")],1),t._v(" "),a("li",[a("strong",[t._v("重写(Override)")]),t._v("：也叫做"),a("strong",[t._v("覆盖")]),t._v("，也叫"),a("strong",[t._v("复写")]),t._v("，一般发生在子类和父类继承关系之间。子类"),a("strong",[t._v("重新定义")]),t._v("父类中有相同名称和参数的"),a("font",{staticStyle:{background:"yellow"}},[t._v("『"),a("strong",[t._v("虚函数")]),t._v("』")]),t._v("。")],1)]),t._v(" "),a("blockquote",[a("p",[t._v("参考："),a("a",{attrs:{href:"https://blog.csdn.net/u010275850/article/details/45583705",target:"_blank",rel:"noopener noreferrer"}},[t._v("C++_重载、重写和重定义的区别"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("PS：但是，从很多英语教材上面，来说，重定义和重写都是单词（override），理解参考第4节")]),t._v(" "),a("p",[t._v("子类重新定义父类虚函数的方法叫做覆写")]),t._v(" "),t._m(76),t._v(" "),t._m(77),t._v(" "),t._m(78),t._v(" "),t._m(79),t._v(" "),t._m(80),t._v(" "),t._m(81),t._v(" "),t._m(82),t._v(" "),t._m(83),t._m(84),t._v(" "),t._m(85),t._m(86),t._v(" "),t._m(87),t._v(" "),t._m(88),t._v(" "),a("ul",[t._m(89),t._v(" "),a("li",[a("font",{staticStyle:{background:"yellow"}},[t._v("动态绑定：符合某些条件就会做动态绑定，"),a("strong",[t._v("3个条件")])])],1)]),t._v(" "),t._m(90),t._m(91),t._v(" "),a("ul",[a("li",[t._v("牛客上配套习题："),a("a",{attrs:{href:"https://www.nowcoder.com/test/question/done?tid=44172669&qid=15197#summary",target:"_blank",rel:"noopener noreferrer"}},[t._v("传送门"),a("OutboundLink")],1)])]),t._v(" "),t._m(92),t._m(93),t._v(" "),t._m(94),t._m(95),t._v(" "),t._m(96),t._m(97),t._v(" "),t._m(98),t._v(" "),t._m(99),t._m(100),t._m(101),t._v(" "),t._m(102),t._m(103),t._m(104),t._v(" "),t._m(105),t._v(" "),t._m(106),t._v(" "),t._m(107),t._v(" "),t._m(108),t._v(" "),t._m(109),t._v(" "),t._m(110),t._m(111),t._v(" "),t._m(112),t._v(" "),t._m(113),t._m(114),t._v(" "),t._m(115),t._v(" "),a("blockquote",[a("p",[t._v("第2点，参考自用户讨论：@"),a("a",{attrs:{href:"https://www.nowcoder.com/profile/2887214",target:"_blank",rel:"noopener noreferrer"}},[t._v("牛客2887214号"),a("OutboundLink")],1)])]),t._v(" "),t._m(116),t._m(117),t._v(" "),a("p",[t._v("date: 2020-05-31\nsummary: C++对C的const关键字增强的底层机制")]),t._v(" "),t._m(118),t._v(" "),a("p",[t._v("背景：\n我们总说C语言中const修饰的变量看上去似乎是常量，其实是个“冒牌货”，应该叫”常变量”，比如用指针间接赋值，就能改变了。")]),t._v(" "),a("p",[t._v("代码测试：\n将指针间接修改变量值的代码放到C语言编译器和C++编译器去测试")]),t._v(" "),a("p",[t._v("DevC++的C语言编译器")]),t._v(" "),t._m(119),t._m(120),t._v(" "),a("p",[t._v("DevC++的C++语言编译器")]),t._v(" "),t._m(121),t._m(122),t._v(" "),a("p",[t._v("奇特的结果：\n我们要是写了这样的函数在银行程序中，要是用不同编译器，那么对账就对不上了。\n总结：\nC中的const是个常变量，变量的值能够被间接修改。\nC++中的const是一个真正的常量！")]),t._v(" "),a("p",[t._v("Tips：")]),t._v(" "),t._m(123),t._v(" "),a("p",[t._v("那么，我们或许会疑惑：\nQ：我们说C++中的是一个真正的常量，那为什么，没有C++编译器对我们”用指针间接修改”的行为，没有报warning或者error呢？\nA：C++要兼容C，所以，它认为这个语法是可以的\nQ：那么问题又来了，那他既然兼容，那么为什么最后却没改变那个变量的值呢？\nA：因为C++只是兼容那种语法写法，但是底层的实现却对const关键字进行了加强。")]),t._v(" "),t._m(124),t._v(" "),t._m(125),t._v(" "),a("p",[t._v("当C++编译器，扫描到常量声明时，它不再像C语言那样，把这个const给它单独分配内存。")]),t._v(" "),a("p",[t._v("在我们先前的//test.cpp中。\nC++进行了如下操作：")]),t._v(" "),t._m(126),t._v(" "),t._m(127),t._v(" "),t._m(128),t._v(" "),t._m(129),t._v(" "),a("p",[t._v("我们现在来证明这个开辟的内存空间的存在")]),t._v(" "),t._m(130),t._m(131),t._v(" "),t._m(132),t._v(" "),t._m(133),t._v(" "),t._m(134),t._v(" "),t._m(135),t._v(" "),t._m(136),t._v(" "),t._m(137),t._v(" "),a("p",[t._v("Tips：\n只有下面两种的时候，它才会分配空间")]),t._v(" "),t._m(138),t._v(" "),t._m(139),t._v(" "),t._m(140),t._v(" "),t._m(141),t._v(" "),a("p",[t._v("证明的代码：")]),t._v(" "),t._m(142),t._v(" "),a("img",{attrs:{src:"/photos/2020.5.30_31/05.png",width:"80%"}}),t._v(" "),t._m(143),t._v(" "),t._m(144),t._v(" "),a("p",[t._v("C++对C语言的const关键字进行了增强！\n"),a("font",{attrs:{color:"red",size:"3"}},[t._v("\n特点：\nC++中的const修饰的变量，变成了真正的常量，所以叫const常量")])],1),t._v(" "),t._m(145),t._v(" "),a("p",[t._v("Tips:要想了解C++中const实现机制，请移步《C++中对C的const关键字增强》一文")]),t._v(" "),t._m(146),t._v(" "),t._m(147),a("p",[t._v("当成员函数被声明为const时，如果这个const成员函数试图修改这个对象的数据，编译器将视为错误。\n因为：你都和我约定了不能修改，那就得履行。")]),t._v(" "),t._m(148),t._v(" "),t._m(149),t._v(" "),t._m(150),t._v(" "),t._m(151),t._m(152),t._v(" "),a("p",[t._v("函数返回值采用“引用传递”的场合,出现在类的赋值函数中，目的是为了实现链式表达。\n例如：")]),t._v(" "),t._m(153),t._m(154),t._v(" "),t._m(155),t._v(" "),a("p",[t._v("补充杂项：")]),t._v(" "),t._m(156),t._v(" "),t._m(157),t._v(" "),t._m(158),t._m(159),t._v(" "),t._m(160),t._v(" "),t._m(161),t._v(" "),t._m(162),t._v(" "),t._m(163),t._v(" "),t._m(164),t._v(" "),t._m(165),t._v(" "),t._m(166),t._v(" "),t._m(167),t._v(" "),t._m(168),t._v(" "),t._m(169),t._v(" "),a("ul",[a("li",[t._v("《"),a("a",{attrs:{href:"https://www.nowcoder.com/test/question/done?tid=43575799&qid=67992",target:"_blank",rel:"noopener noreferrer"}},[t._v("C++Primer"),a("OutboundLink")],1),t._v("》")])]),t._v(" "),t._m(170),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.nowcoder.com/questionTerminal/07016c63465442fe858a1f323eb3fa0e",target:"_blank",rel:"noopener noreferrer"}},[t._v("switch(c)语句中，c不可以是什么类型（）"),a("OutboundLink")],1)])]),t._v(" "),t._m(171),t._m(172),t._v(" "),t._m(173),t._v(" "),t._m(174),t._m(175),t._v(" "),a("ul",[a("li",[t._v("牛客"),a("a",{attrs:{href:"https://www.nowcoder.com/test/question/done?tid=44174655&qid=305235#summary",target:"_blank",rel:"noopener noreferrer"}},[t._v("例题"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("但我决定可能不仅仅是这些，可能还要更多的，比如C++11引入")])]),t._v(" "),t._m(176),t._m(177),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.nowcoder.com/questionTerminal/cafc86b72f2c42b8aacb47178b045026",target:"_blank",rel:"noopener noreferrer"}},[t._v("完全二叉树"),a("OutboundLink")],1),t._v("共有700结点，该二叉树有多少个叶子结点？")])]),t._v(" "),t._m(178),t._v(" "),t._m(179),t._v(" "),a("p",[t._v("这题的数学解法，还是剑指offer上的写的比《具体数学》上面的好")]),t._v(" "),t._m(180),t._v(" "),t._m(181)])}),[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"c-98核心详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c-98核心详解"}},[this._v("#")]),this._v(" C++98核心详解")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"📑-目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#📑-目录"}},[this._v("#")]),this._v(" 📑 目录")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"⭐️3加1对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#⭐️3加1对比"}},[this._v("#")]),this._v(" ⭐️3加1对比")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ul",[n("li",[t._v("class")]),t._v(" "),n("li",[t._v("struct")]),t._v(" "),n("li",[t._v("union")]),t._v(" "),n("li",[t._v("enum『枚举类型"),n("strong",[t._v("是1种基本类型")]),t._v("，不是1种构造类型，因为它不能再分解为任何其他基本类型，比如，"),n("code",[t._v("class")]),t._v("，"),n("code",[t._v("struct")]),t._v("，"),n("code",[t._v("union")]),t._v("』")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（1）class"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）class"}},[this._v("#")]),this._v(" （1）"),s("code",[this._v("class")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("、继承，默认是『"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v("继承』\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("、内部可以放成员变量，成员函数，默认成员变量访问控制是：『"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v("』\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("、成员函数类：\n    有』构造函数\n    有』析构函数\n    有』虚函数\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（2）struct『c-中』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（2）struct『c-中』"}},[this._v("#")]),this._v(" （2）"),s("code",[this._v("struct")]),this._v("『C++中』")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("本质："),s("strong",[this._v("是一种class")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("、继承，默认是『"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v("继承』____\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("、内部可以放成员变量，成员函数，默认成员变量访问控制是：『"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v("』__\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("、成员函数类：\n    有』构造函数\n    有』析构函数\n    有』虚函数\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<bits/stdc++.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("A")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("a")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("99")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("demo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tcout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a="')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t\t"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("A")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tcout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"die AAA"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("myPoly")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tcout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*AAA******"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//struct B : private A")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//下面的写法，等价于，struct B : public A")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token base-clause"}},[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("B")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("b")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("888")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("demo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tcout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b="')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("B")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tcout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"die BBB"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("myPoly")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tcout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*BBBB******"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//因为加上了system("pause");所以需要下面这样挂掉B，才能知道B的析构函数被调用')]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tA one"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("demo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\tB two"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\ttwo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("demo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n\t\tA "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" pointer"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" B"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tpointer"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("myPoly")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("system")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pause"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br"),n("span",{staticClass:"line-number"},[t._v("35")]),n("br"),n("span",{staticClass:"line-number"},[t._v("36")]),n("br"),n("span",{staticClass:"line-number"},[t._v("37")]),n("br"),n("span",{staticClass:"line-number"},[t._v("38")]),n("br"),n("span",{staticClass:"line-number"},[t._v("39")]),n("br"),n("span",{staticClass:"line-number"},[t._v("40")]),n("br"),n("span",{staticClass:"line-number"},[t._v("41")]),n("br"),n("span",{staticClass:"line-number"},[t._v("42")]),n("br"),n("span",{staticClass:"line-number"},[t._v("43")]),n("br"),n("span",{staticClass:"line-number"},[t._v("44")]),n("br"),n("span",{staticClass:"line-number"},[t._v("45")]),n("br"),n("span",{staticClass:"line-number"},[t._v("46")]),n("br"),n("span",{staticClass:"line-number"},[t._v("47")]),n("br"),n("span",{staticClass:"line-number"},[t._v("48")]),n("br"),n("span",{staticClass:"line-number"},[t._v("49")]),n("br"),n("span",{staticClass:"line-number"},[t._v("50")]),n("br"),n("span",{staticClass:"line-number"},[t._v("51")]),n("br"),n("span",{staticClass:"line-number"},[t._v("52")]),n("br"),n("span",{staticClass:"line-number"},[t._v("53")]),n("br"),n("span",{staticClass:"line-number"},[t._v("54")]),n("br"),n("span",{staticClass:"line-number"},[t._v("55")]),n("br"),n("span",{staticClass:"line-number"},[t._v("56")]),n("br"),n("span",{staticClass:"line-number"},[t._v("57")]),n("br"),n("span",{staticClass:"line-number"},[t._v("58")]),n("br"),n("span",{staticClass:"line-number"},[t._v("59")]),n("br"),n("span",{staticClass:"line-number"},[t._v("60")]),n("br"),n("span",{staticClass:"line-number"},[t._v("61")]),n("br"),n("span",{staticClass:"line-number"},[t._v("62")]),n("br"),n("span",{staticClass:"line-number"},[t._v("63")]),n("br"),n("span",{staticClass:"line-number"},[t._v("64")]),n("br"),n("span",{staticClass:"line-number"},[t._v("65")]),n("br"),n("span",{staticClass:"line-number"},[t._v("66")]),n("br"),n("span",{staticClass:"line-number"},[t._v("67")]),n("br"),n("span",{staticClass:"line-number"},[t._v("68")]),n("br"),n("span",{staticClass:"line-number"},[t._v("69")]),n("br"),n("span",{staticClass:"line-number"},[t._v("70")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（3）union『c-中』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（3）union『c-中』"}},[this._v("#")]),this._v(" （3）"),s("code",[this._v("union")]),this._v("『C++中』")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("本质：它是一种"),s("strong",[this._v("特殊的类")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("参考《后台开发》")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("、继承：继承自别人"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("能给别人继承都『不可以』______\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("、内部可以放成员变量，成员函数，默认成员变量访问控制是：『"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v("』__\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("、成员函数类：\n    有』构造函数\n    有』析构函数\n    不可以有』虚函数______\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（4）enum『只有它不是特殊的类』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（4）enum『只有它不是特殊的类』"}},[this._v("#")]),this._v(" （4）"),s("code",[this._v("enum")]),this._v("『只有它不是特殊的类』")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("blockquote",[n("p",[t._v("枚举类型"),n("strong",[t._v("是1种基本类型")]),t._v("，不是1种构造类型，因为它不能再分解为任何其他基本类型『比如，"),n("code",[t._v("class")]),t._v("，"),n("code",[t._v("struct")]),t._v("，"),n("code",[t._v("union")]),t._v("』")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"⭐️类的『成员变量』和『非成员变量』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#⭐️类的『成员变量』和『非成员变量』"}},[this._v("#")]),this._v(" ⭐️类的『成员变量』和『非成员变量』")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（1）成员变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）成员变量"}},[this._v("#")]),this._v(" （1）成员变量")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("书中记载")]),this._v("：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("nonstatic member 非静态成员\n"),s("ul",[s("li",[this._v("普通数据成员")]),this._v(" "),s("li",[this._v("const数据成员")])])]),this._v(" "),s("li",[this._v("static member 静态成员")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("static成员变量")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("c++的一个类中『"),s("strong",[this._v("声明")]),this._v("』一个static成员变量，static是加了访问控制的全局变量，不被继承")]),this._v(" "),s("li",[this._v("类和子类对象，static变量占有一份内存")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("重点理解："),s("strong",[this._v("静态成员变量的初始化一定要在『类外』")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("原因： 因为静态成员变量本身在main函数未开始时已经存在。不要让成员变量的初始化依赖于对象。不用对象，难到就不能用这一变量了吗？如果将初始化放在类内。那么"),s("strong",[this._v("当不声明对象时")]),this._v("，无法使用这一静态变量。编译器报错为‘undeclared identifier’")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-txt line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("类中的声明和定义辨析：（重点、难点）\n笔者的看法是：\n1、逻辑上说明是一起，只能表示可以『声明』在一起。（声明的门槛很低）\n2、具体内存在哪分配，这个决定『能不能在类内』进行『定义』\n\n比如：\n1、友元函数在『类内』声明，不能在『类内』定义，能在『类外』定义\n2、static成员变量在『类内』声明，不能在『类内』定义，能在『类外』定义\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("static和非static特点")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("静态成员存在于"),s("strong",[this._v("内存")]),this._v("，非静态成员需要实例化才会分配内存（注意，也就是在虚拟内存空间中，表示的是.bss和.data段中）")]),this._v(" "),s("li",[this._v("非静态成员的生存期决定于该类的生存期，而静态成员生存期则与程序生命期相同")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（2）非成员变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（2）非成员变量"}},[this._v("#")]),this._v(" （2）非成员变量")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"⭐️类的『成员函数』和『非成员函数』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#⭐️类的『成员函数』和『非成员函数』"}},[this._v("#")]),this._v(" ⭐️"),s("strong",[this._v("类的『成员函数』和『非成员函数』")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("说明：成员函数的分类，需要考虑排序组合，"),s("strong",[this._v("是很多，很复杂")]),this._v("的，不然就只能一个一个维度去分类。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（1）成员函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）成员函数"}},[this._v("#")]),this._v(" （1）成员函数")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ul",[n("li",[t._v("到底什么是成员函数？")]),t._v(" "),n("li",[t._v("类的成员函数：是定义为"),n("strong",[t._v("类的一部分")]),t._v("的函数，有时也被称为方法。（C++primer第5版，P20）")]),t._v(" "),n("li",[t._v("各类函数中：构造函数、析构函数、拷贝初始化构造函数等是类的成员函数。")]),t._v(" "),n("li",[t._v("成员函数分下面3类（应该说是2类，纯虚函数属于虚函数的子集的话）")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-txt line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("1、非虚函数（non-virtual 函数）：\n你『不希望』派生类（derived class）重新定义 (override, 复写) 它.\n\n\n\n2、虚函数（virtual 函數）：\n你希望 derived class 重新定义 (override, 复写) 它，且你对它已有『默认』定义。\n3、纯虚函数（pure virtual 函數）：\n你希望 derived class 『一定』要重新定义 (override 复写)\n它，你对它沒有默认定义。\n\nPS：我们把不是纯的虚函数的虚函数叫作（impure virtual函数）\nPS：在语法上，我们只要在任何一个函数前面加上virtual这样一个关键字，它就成为一个虚函数。\n数据可以被继承下来，就是占它用了内存。\n函数的继承如何理解？但是不应该从内存角度理解，函数的继承，继承的是调用权利\n\nPS：其实纯虚函数是可以有定义的！！\n> 出处：《C++Primer》中文版第五版541页第22行。\n我们可以为纯虚函数提供定义，不过函数体『必须定义在类的外部』。若定义在类的内部，会出现错误：pure-specifier on function-definition。\n》 虚函数是可以定义『在类的内部的』，外部也可以！\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("参考自：侯捷")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("p",[s("strong",[this._v("override")]),this._v("这个术语，在这个主题不能随便用！！")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("p",[this._v("这个术语，"),s("strong",[this._v("一定是用在『虚函数』被重新定义，才能够叫（override）")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("p",[s("strong",[this._v("纯虚函数")]),this._v("：只提供一个"),s("strong",[this._v("接口")]),this._v("，具体实现方法需要"),s("strong",[this._v("派生类")]),this._v("自己去实现，纯虚函数本身不可以有实现")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("p",[s("strong",[this._v("非虚函数")]),this._v("：提供接口，并且强制"),s("strong",[this._v("实现")]),this._v("方法")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("根据《"),s("strong",[this._v("深度探索C++对象模型")]),this._v("》一书所说：")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("原始的“C with Classes”只支持，"),s("strong",[this._v("（Nonstatic member function）非静态成员函数")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("（Virtual function）虚函数")]),this._v("，是在20世纪80年代中期加入进来的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("（Static member function）静态成员函数")]),this._v("是最后被引入的一种函数类型!")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ul",[n("li",[t._v("1、static member function")]),t._v(" "),n("li",[t._v("2、nonstatic member function\n"),n("ul",[n("li",[t._v("1、普通的成员函数")]),t._v(" "),n("li",[t._v("2、const成员函数")])])]),t._v(" "),n("li",[t._v("3、virtual member function")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("成员函数中"),s("strong",[this._v("易错")]),this._v("：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[this._v("由于成员函数中的const成员函数，const"),s("strong",[this._v("实际")]),this._v("上修饰的是"),s("strong",[this._v("this指针")]),this._v("。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<bits/stdc++.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这行没错")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maxn"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//修饰变量，这行却没错")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//下面会出错，[Error] static member function 'static void A::demo()' cannot have cv-qualifier")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("demo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" \n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tcout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("demo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（2）非成员函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（2）非成员函数"}},[this._v("#")]),this._v(" （2）非成员函数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"_1、友元函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、友元函数"}},[this._v("#")]),this._v(" 1、友元函数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("1、友元函数的『"),s("strong",[this._v("声明")]),this._v("』可以放在类"),s("strong",[this._v("声明")]),this._v("的任何地方，不受访问限定关键字private、protected、public的限制")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("2、尽管友元函数的"),s("strong",[this._v("原型")]),this._v("有在"),s("strong",[this._v("类的定义")]),this._v("中出现过，但是"),s("strong",[this._v("友元函数并不是成员函数")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("3、友元是一种"),s("strong",[this._v("定义在类外部")]),this._v("的普通函数（友元函数既可以在类的内部，也可以在类的外部定义《"),s("strong",[this._v("C++primer")]),this._v("》中说了），但它需要在类体内进行"),s("strong",[this._v("说明『声明』")]),this._v("，为了与该类的成员函数加以区别，在说明时前面加以关键字friend")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"_2、友元"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、友元"}},[this._v("#")]),this._v(" 2、友元")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("一个基类的声明中有纯虚函数，该基类派生类一定不再是抽象类（错误）")]),this._v(" "),s("li",[this._v("如果在派生类中没有对所有纯虚函数进行定义，则此派生类仍然是抽象类，不能用来定义对象。所以A错.")]),this._v(" "),s("li",[this._v("构造函数不能被覆盖")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"🍀big-three讲解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🍀big-three讲解"}},[this._v("#")]),this._v(" 🍀Big Three讲解")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"『1』构造函数详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#『1』构造函数详解"}},[this._v("#")]),this._v(" 『1』构造函数详解")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"_1-普通ctor（普通构造函数）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-普通ctor（普通构造函数）"}},[this._v("#")]),this._v(" 1.普通ctor（普通构造函数）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("1、无参的普通构造函数")]),this._v(" "),s("li",[this._v("2、有参的普通构造函数\n"),s("ul",[s("li",[this._v("（1）类型转换构造函数：只有1个参数的普通构造函数一般都可以称作『类型转换构造函数』")]),this._v(" "),s("li",[this._v("（2）其他有参的普通构造函数")])])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//无参的『普通构造函数』")]),t._v("\n    \t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("A")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//有参的『普通构造函数』，并且由于只有1个参数，也叫『类型转换构造函数』")]),t._v("\n    \t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("A")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          \tcout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Int Constructor calles"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("A")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            cout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Copy ctor"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//拷贝构造函数，原因是参数是『本类类型的引用』")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"_2-copy-ctor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-copy-ctor"}},[this._v("#")]),this._v(" 2.copy ctor")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("又称；复制构造函数/拷贝构造函数/拷贝初始化构造函数")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("1、默认的『copy ctor』")]),this._v(" "),s("li",[this._v("2、如果你自行编写了新的copy ctor，那么默认的copy ctor就不存在了")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("Demo "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("c2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//会调用copy ctor，初始化")]),t._v("\nDemo c2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("c1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//会调用copy ctor，注意是初始化，不是赋值！")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"『2』析构函数详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#『2』析构函数详解"}},[this._v("#")]),this._v(" 『2』析构函数详解")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("strong",[this._v("没有")]),this._v("virtual的析构函数")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("又称："),s("strong",[this._v("一般")]),this._v("的析构函数")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[s("strong",[this._v("有")]),this._v("virtual的析构函数")])]),this._v(" "),s("li",[s("p",[this._v("析构时 区别 delete 和 delete[]")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h5",{attrs:{id:"在c-中，为了让某个类只能通过new来创建（即如果直接创建对象，编译器将报错），应该"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在c-中，为了让某个类只能通过new来创建（即如果直接创建对象，编译器将报错），应该"}},[this._v("#")]),this._v(" 在C++中，为了让某个类只能通过new来创建（即如果直接创建对象，编译器将报错），应该")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("将析构函数设为私有")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"🍀namespace命名空间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🍀namespace命名空间"}},[this._v("#")]),this._v(" 🍀"),s("code",[this._v("namespace")]),this._v("命名空间")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-txt line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("- namespace，是指标识符的各种可见范围\n\n- C++标准程序库中的所有标识符都被定义于一个名为std的namespace中。\n\n  一 ：<iostream>和<iostream.h>格式不一样，前者没有后缀，实际上，在你的编译器include文件夹里面可以看到，二者是两个文件，打开文件就会发现，里面的代码是不一样的。后缀为.h的头文件c++标准已经明确提出不支持了，早些的实现将标准库功能定义在**全局空间**里，声明在带.h后缀的头文件里，c++标准为了和C区别开，也为了正确使用命名空间，规定头文件不使用后缀.h。 因此。\n\n- 1、命名空间主要是将[全局空间]『』『『划分为更加小块的全局空间\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"🐾一、面向对象难点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🐾一、面向对象难点"}},[this._v("#")]),this._v(" 🐾一、面向对象难点")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("面向对象的三大基本特征：封装、继承、多态")]),this._v(" "),s("li",[this._v("面向对象的五大基本原则：")]),this._v(" "),s("li",[this._v("单一职责原则、开放封闭原则、里氏替换原则、依赖倒置原则、接口隔离原则")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（1）类型转换函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）类型转换函数"}},[this._v("#")]),this._v(" （1）类型转换函数")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ul",[n("li",[n("p",[t._v("带非默认参数的构造函数可以把基本类型数据转换成类类型对象。")])]),t._v(" "),n("li",[n("p",[t._v("『类型转换函数』可以把类类型对象转换为其他指定类型对象。")])]),t._v(" "),n("li",[n("p",[t._v("『类型转换函数』只能定义为一个类的成员函数，"),n("strong",[t._v("不能")]),t._v("定义为类的"),n("strong",[t._v("友元函数。")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"🥇二、辨析：重写-override-与重载-overload-与重定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🥇二、辨析：重写-override-与重载-overload-与重定义"}},[this._v("#")]),this._v(" 🥇二、辨析：重写(Override)与重载(Overload)与重定义")])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("strong",[this._v("重载(Overload)")]),this._v("：函数名相同，函数的参数个数、参数类型或参数顺序三者中必须至少有一种不同。函数返回值的类型可以相同，也可以不相同。发生在一个类内部。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("多态是为了"),s("strong",[this._v("接口")]),this._v("重用，封装和继承是为了代码重用")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"🐾三、多态与虚函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🐾三、多态与虚函数"}},[this._v("#")]),this._v(" 🐾三、多态与虚函数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（0）static变量的说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（0）static变量的说明"}},[this._v("#")]),this._v(" （0）"),s("code",[this._v("static")]),this._v("变量的说明")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("c++的一个类中声明一个"),s("strong",[this._v("static成员变量")]),this._v("，下面描述正确的是")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("static是加了访问控制的全局变量，『"),s("strong",[this._v("不被继承")]),this._v("』，类和子类对象，static变量占有一份内存")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（1）虚函数相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）虚函数相关"}},[this._v("#")]),this._v(" （1）虚函数相关")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("1、（static）静态函数不可以是虚函数『虚成员函数不可能是static 成员函数』")]),this._v(" "),s("li",[this._v("2、（inline）虚函数可以声明为inline，但是编译器不会将其作为inline函数处理『有的选择题故意为难，但是其实虚函数是可以声明为inline的，但是分情况』』")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("a")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n尽管以上写法是没有语法错误的，并且可以执行，但其实test函数已经不是内联函数了，因为"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v("只是对编译器的一个建议而已。\n搞清本质就好。\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（2）虚函数能不能inline"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（2）虚函数能不能inline"}},[this._v("#")]),this._v(" （2）虚函数能不能inline")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-txt line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Q:虚函数不能内联，但是语法不出错？\n\nA:不是的，虚函数在『『没有表现多态的时候』』是可以内联的，表现多态的时候不能\n\n『没有表现多态的时候』:内联只是对编译器的一种请求，是否真正内联要看编译器的处理，虚函数是可以内联的，但是编译器不会响应内联请求，即他会忽略内联说明，将其当做普通虚函数处理。\n\n有说法说：\n虚函数不可以内联，因为虚函数是在运行期的时候确定具体调用的函数，内联是在编译期的时候进行代码展开，两者冲突，所以没有一起使用的做法。『『这是不严谨的』』\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（3）『多态神器』-多态3条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（3）『多态神器』-多态3条件"}},[this._v("#")]),this._v(" （3）『多态神器』-多态3条件")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("『『"),s("code",[this._v("动态绑定3条件")]),this._v("』』")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("C++编译器，看到一个函数调用，他有2个考量，静态还是动态绑定：")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[this._v("静态被编译成："),s("code",[this._v("call")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("、通过指针来调用『注意，引用显然也是的，因为底层也是指针』\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("、这个指针是向上转型up cast了。『比如，派生类赋值给基类指针，基类指针调用』\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("、调用虚函数\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"例题1、条件1和条件2不满足『非多态』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#例题1、条件1和条件2不满足『非多态』"}},[this._v("#")]),this._v(" 例题1、条件1和条件2不满足『非多态』")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("题解：\n这一题中，最后一个c，是相当于强制类型转换，『或许叫：向下转型？？』，然后没有通过指针来调用\n\n用牛油的一个解释：动态绑定（多态）只有在指针和引用时才有效，其他情况下无效。\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br"),s("span",{staticClass:"line-number"},[this._v("2")]),s("br"),s("span",{staticClass:"line-number"},[this._v("3")]),s("br"),s("span",{staticClass:"line-number"},[this._v("4")]),s("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"例题2、条件3不满足『非多态』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#例题2、条件3不满足『非多态』"}},[this._v("#")]),this._v(" 例题2、条件3不满足『非多态』")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<bits/stdc++.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("mytest")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tcout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AAA"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token base-clause"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("mytest")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tcout"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"BBB"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\t\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\n\tA "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" p"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" B"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tp"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("mytest")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输出的是AAA")]),t._v("\n    \n\t\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("本题不是动态绑定原因分析：")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("1、通过指针来调用『注意，引用显然也是的，因为底层也是指针』————满足，用了p->mytest();\n2、这个指针是向上转型up cast了。『比如，派生类赋值给基类指针，基类指针调用』————满足，A是B的基类\n3、调用虚函数——不满足，因为p指针是A类型的，但是在classA中该函数还不是『虚函数』，所以想走虚函数指针——虚函数表的路径走不通。。。\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br"),s("span",{staticClass:"line-number"},[this._v("2")]),s("br"),s("span",{staticClass:"line-number"},[this._v("3")]),s("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"例题3-虚析构函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#例题3-虚析构函数"}},[this._v("#")]),this._v(" 例题3-虚析构函数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("虚析构函数，是为了解决基类的指针指向派生类对象，并且用『基类指针』删除派生类对象。")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("A")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        cout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("A")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        cout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("A")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        cout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token base-clause"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("B")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        cout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"4"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("B")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("B "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        cout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("B")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        cout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"6"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    A "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pa "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("B")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" pa"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输出是：1 4 6 3")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br"),n("span",{staticClass:"line-number"},[t._v("35")]),n("br"),n("span",{staticClass:"line-number"},[t._v("36")]),n("br"),n("span",{staticClass:"line-number"},[t._v("37")]),n("br"),n("span",{staticClass:"line-number"},[t._v("38")]),n("br"),n("span",{staticClass:"line-number"},[t._v("39")]),n("br"),n("span",{staticClass:"line-number"},[t._v("40")]),n("br"),n("span",{staticClass:"line-number"},[t._v("41")]),n("br"),n("span",{staticClass:"line-number"},[t._v("42")]),n("br"),n("span",{staticClass:"line-number"},[t._v("43")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("考察的是对继承体系中的构造和析构函数调用顺序的理解。\n在调用new B()的时候，因为B继承A，所以会首先调用其父类的构造函数，输出1\n然后调用自己的构造函数，输出4\n\n//析构的时候，是会调用的\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br"),s("span",{staticClass:"line-number"},[this._v("2")]),s("br"),s("span",{staticClass:"line-number"},[this._v("3")]),s("br"),s("span",{staticClass:"line-number"},[this._v("4")]),s("br"),s("span",{staticClass:"line-number"},[this._v("5")]),s("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("对比，下面，如果去除掉A的析构函数的，虚函数")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[this._v("~")]),s("span",{pre:!0,attrs:{class:"token function"}},[this._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v(")")]),this._v("\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("输出为：1 4 3\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("原因：静态绑定，this指针直接调用了A的析构，B的没有。")]),this._v(" "),s("li",[this._v("很显然，有的时候，会出问题。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"🐾四、『运算符重载』详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🐾四、『运算符重载』详解"}},[this._v("#")]),this._v(" 🐾四、『运算符重载』详解")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("（本质还是函数重载）")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（1）重载的2种函数类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）重载的2种函数类型"}},[this._v("#")]),this._v(" （1）重载的2种函数类型")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("1、成员函数")]),this._v(" "),s("li",[this._v("2、友元函数『属于，非成员函数』")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("易错：有的运算符，只能重载为『成员函数』")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" \t\t\t\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//重载，下标运算符，比如重载后，返回当前vetor中的元素，需要this指针，而非成员函数是没有this指针的233")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//重载，函数调用运算符，")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("\n上面"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("个，『只能』通过成员函数进行重载\n我的理解，备注如上\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（2）可以重载，但建议不要重载的运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（2）可以重载，但建议不要重载的运算符"}},[this._v("#")]),this._v(" （2）可以重载，但建议不要重载的运算符")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("code",[this._v("&&")]),this._v("和"),s("code",[this._v("||")]),this._v("很建议不要重载『会出点问题』")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("、因为，重载运算符，也就意味着靠函数重载来完成，操作数会作为『函数参数，传递』\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("、C"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("的『函数参数都会被求值，无法实现（短路规则）』\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（3）不能重载的5个运算符记忆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（3）不能重载的5个运算符记忆"}},[this._v("#")]),this._v(" （3）不能重载的5个运算符记忆")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ul",[n("li",[n("p",[t._v("百度招聘考过。")])]),t._v(" "),n("li",[n("p",[t._v("1、第1个，也是我们常常忘记是运算符的"),n("code",[t._v("sizeof")])])]),t._v(" "),n("li",[n("p",[t._v("2、其他4个，记住只要挂"),n("code",[t._v(".")]),t._v("的运算符"),n("strong",[t._v("均不能被重载")])])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("C"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("不能重载的总共五个：\n（"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("）"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),t._v("（类成员访问运算符） \n（"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("）"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('" .*"')]),t._v("（类成员指针访问运算符） \n（"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("）"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"::"')]),t._v("（域运算符） \n（"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("）"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"siezof"')]),t._v("（长度运算符） \n（"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("）"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('" ?:"')]),t._v("（条件运算符）\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"♻️五、c-中对c的const关键字增强"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#♻️五、c-中对c的const关键字增强"}},[this._v("#")]),this._v(" ♻️五、C++中对C的const关键字增强")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（1）问题导入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）问题导入"}},[this._v("#")]),this._v(" （1）问题导入")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//demo.c ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("98")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tp"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("结果：\n"),s("img",{attrs:{src:"/photos/2020.5.30_31/01.png",width:"80%"}})])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//test.cpp ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<cstdio>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("98")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tp"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("结果：\n"),s("img",{attrs:{src:"/photos/2020.5.30_31/02.png",width:"80%"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("table",[s("td",{attrs:{bgcolor:"#FFFF",FF:""}},[this._v("\n以上两次测试，都没有显示warning和error")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（2）底层原理分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（2）底层原理分析"}},[this._v("#")]),this._v(" （2）底层原理分析")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"_1、c-编译器对const做了一些加强，做了一些特殊的处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、c-编译器对const做了一些加强，做了一些特殊的处理"}},[this._v("#")]),this._v(" 1、C++编译器对const做了一些加强，做了一些特殊的处理")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("blockquote",[n("ul",[n("li",[t._v("1）扫描到这一行，const int a=98;\nC++编译器会把这个"),n("b",[t._v("变量a")]),t._v("放在一个"),n("b",[t._v("符号表（键值-值对）")]),t._v("里面\n"),n("b",[t._v("此时，并没有分配内存！！！")]),t._v("\n注意：这样的话，key和value是定了，不能修改的了。\n符号表具体的实现和我们的内存中的，栈，堆不是同一套实现机制。\n有很多常量就都放在这个里面了。\nTips：\n当你去"),n("b",[t._v("使用")]),t._v("这个a的时候，它就给你从符号表里面给你把这个98给拿出来，供你"),n("b",[t._v("使用")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("table",[s("td",{attrs:{bgcolor:"#FFFF",FF:""}},[this._v('\n注意"使用"一词')])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("ul",[s("li",[this._v("2）遇到类似这样的情况，此时才给a变量另外分配一个内存。\n扫描到这一句p=(int "),s("em",[this._v(")&a;\n当你对这个a变量取地址的时候，C++编译器，会为这个a再"),s("b",[this._v("单独的开辟一块内存空间")]),this._v("，然后你把这个内存空间，赋给了p，相当于一个指针P指向了这里。然后你通过")]),this._v("p去间接的修改的地址，不再是原来的值（value）,而是我们新开辟的空间的值（注意理解）\n所以，当你再使用a的时候，你打印的还是98（符号表中的a）\n"),s("img",{attrs:{src:"/photos/2020.5.30_31/03.png",width:"90%"}})])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"_2、证明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、证明"}},[this._v("#")]),this._v(" 2、证明")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//solution.cpp ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<cstdio>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("98")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tp"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\t\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a=%d\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*p=%d"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("打印的是:\n"),s("img",{attrs:{src:"/photos/2020.5.30_31/04.png",width:"80%"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("b",[this._v("注意：")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("table",[s("td",{attrs:{bgcolor:"#FFFF",FF:""}},[this._v("\nC++编译器虽然可能为const常量分配空间，但不会"),s("b",[this._v("使用")]),this._v("其存储空间中的值，除非你用指针操作。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（3）结论和补充"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（3）结论和补充"}},[this._v("#")]),this._v(" （3）结论和补充")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("1）C语言中的const变量\nC语言中const变量是只读变量，"),s("b",[this._v("有自己的存储空间")]),this._v("\n2）C++中的const常量")])},function(){var t=this.$createElement,s=this._self._c||t;return s("table",[s("td",{attrs:{bgcolor:"#FFFF",FF:""}},[this._v("\n注意：可能分配存储空间,也可能不分配存储空间!")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("编译过程中若发现"),s("b",[this._v("使用常量")]),this._v("则直接以符号表中的值替换")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("ul",[s("li",[this._v("当const常量为全局，并且需要在其它文件中使用,即使用了"),s("b",[this._v("extern")]),this._v("操作符")]),this._v(" "),s("li",[this._v("当使用&操作符取const常量的地址，编译过程中若发现对const使用了"),s("b",[this._v("&操作符")]),this._v("，则给对应的常量分配存储空间（兼容C）")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（4）补充疑问"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（4）补充疑问"}},[this._v("#")]),this._v(" （4）补充疑问")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Q：那么要是分配内存，C++中那个const的分配内存是在什么时候分配的呢？是在编译器"),s("b",[this._v("编译阶段")]),this._v("，还是在"),s("b",[this._v("执行阶段")]),this._v("分配？")])},function(){var t=this.$createElement,s=this._self._c||t;return s("table",[s("td",{attrs:{bgcolor:"#FFFF",FF:""}},[this._v("\nＡ：C++中const分配内存的时机，是在编译期间！（记住！）")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//test.cpp ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<cstdio>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("98")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"&a=%d\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"&b=%d\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//用了取地址 ")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"&c=%d\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("结果表明：\nconst int b的地址在a和c之间，符合我们局部变量申请内存的"),s("b",[this._v("压栈的顺序")]),this._v("，"),s("b",[this._v("它并没有因为，&b这句话写到int c后面，就先分配a，c最后才b")]),this._v("，而是，它扫描完之后，看到这里有&b了，就分配地址了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（5）详解c-中const常见用途"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（5）详解c-中const常见用途"}},[this._v("#")]),this._v(" （5）详解C++中const常见用途")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("ul",[s("li",[this._v("区别：")])]),this._v(" "),s("blockquote",[s("ul",[s("li",[this._v("1）C语言中的const变量\nC语言中const变量是只读变量，"),s("b",[this._v("有自己的存储空间")])]),this._v(" "),s("li",[this._v("2）C++中的const常量\n注意："),s("b",[this._v("可能分配存储空间,也可能不分配存储空间!")])])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"_1、const成员函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、const成员函数"}},[this._v("#")]),this._v(" 1、const成员函数")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetLength")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" itslength"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//成员函数声明为常量")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"_2、指向const对象的指针"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、指向const对象的指针"}},[this._v("#")]),this._v(" 2、指向const对象的指针")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果声明了一个"),s("b",[this._v("指向const对象")]),this._v("的指针，则通过该指针只能调用const方法（成员函数）。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("blockquote",[n("p",[t._v("-因为：const就是用来规定，"),n("b",[t._v("属于这个对象")]),t._v("的是不能有改变的")]),t._v(" "),n("blockquote",[n("ul",[n("li",[t._v("const成员函数（常量成员函数），不会去修改这个对象任何"),n("b",[t._v("非静态成员变量")]),t._v("的值。")]),t._v(" "),n("li",[t._v("static成员函数（静态成员函数），也不会去修改这个对象任何"),n("b",[t._v("非静态成员变量")]),t._v("(毕竟，静态成员函数和静态成员变量其实本质是全局变量嘛，不需要作用在具体的对象上，"),n("b",[t._v("我们写在类里面，只是为了彰显和这个类有紧密的关系")]),t._v(")")]),t._v(" "),n("li",[t._v("因此，我们指向const对象的指针，能够调用的是const成员函数和static成员函数")]),t._v(" "),n("li",[t._v("普通成员函数，内部可以实现修改非静态成员变量的语句，所以"),n("b",[t._v("可能会破坏const对象规定的，不能改变我的内部数据的原则")]),t._v("。")])])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("Rectangle"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" pRect "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" Rectangle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Rectangle "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" pConstRect "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" Rectangle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//指向const对象")]),t._v("\nRectangle"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" pConstPtr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" Rectangle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pConstRect是指向const对象的指针，它只能使用声明为const的成员函数，如GetLength（）。")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"_3、const-修饰函数的返回值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、const-修饰函数的返回值"}},[this._v("#")]),this._v(" 3、const 修饰函数的返回值")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\nA "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" operate "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" A "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("other"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 赋值函数")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nA a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a, b, c 为A 的对象")]),t._v("\na "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正常的链式赋值")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不正常的链式赋值，但合法")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果将赋值函数的返回值加const 修饰，那么该返回值的内容不允许被改动。上例中，语句 a = b = c 仍然正确，但是语句 (a = b) = c 则是非法的。")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"_4、补充"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、补充"}},[this._v("#")]),this._v(" 4、补充")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("blockquote",[n("ul",[n("li",[t._v("非const对象可以访问"),n("b",[t._v("任意的")]),t._v("成员函数,自然包括const成员函数,静态成员函数")]),t._v(" "),n("li",[t._v("const对象的成员是不可修改的,然而const对象通过指针维护的对象却是可以修改的.")]),t._v(" "),n("li",[t._v("const成员函数不可以修改对象的数据,不管对象是否具有const性质.它在编译时,以是否修改成员数据为依据,进行检查。")]),t._v(" "),n("li",[t._v("然而加上mutable修饰符的数据成员,对于任何情况下通过任何手段都可修改,自然此时的const成员函数是可以修改它的")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("blockquote",[n("ul",[n("li",[t._v("const 修饰引用（&）修饰输入参数的用法：")])]),t._v(" "),n("blockquote",[n("ul",[n("li",[t._v("1-对于"),n("b",[t._v("非内部数据类型")]),t._v("的输入参数，应该将“"),n("b",[t._v("值传递")]),t._v("”的方式改为“"),n("b",[t._v("const 引用传递")]),t._v("”，目的是提高效率。例如将"),n("code",[t._v("void Func(A a)")]),t._v(" 改为"),n("code",[t._v("void Func(const A &a)")]),t._v("。当然，虽然这样的确能提高效率。但此时千万千万要小心，一定要搞清楚函数究竟是想返回一个对象的“拷贝”还是仅返回“别名”就可以了，否则程序会出错。")]),t._v(" "),n("li",[t._v("2-对于"),n("b",[t._v("内部数据类型")]),t._v("的输入参数，不要将“值传递”的方式改为“const 引用传递”。否则既达不到提高效率的目的，又降低了函数的可理解性。例如"),n("code",[t._v("void Func(int x)")]),t._v(" 不应该改为"),n("code",[t._v("void Func(const int &x)")]),t._v("。（如何理解？？？）")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("ul",[s("li",[this._v("const 修饰星号（*）用法：")])]),this._v(" "),s("blockquote",[s("ul",[s("li",[this._v("如果给以“指针传递”方式的函数返回值加const 修饰，那么函数返回值（即指针）的内容不能被修改，该返回值只能被赋给加const 修饰的同类型指针。例如函数")])])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n如下语句将出现编译错误：\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("str "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n正确的用法是\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("str "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（6）const导致的函数重载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（6）const导致的函数重载"}},[this._v("#")]),this._v(" （6）const导致的函数重载")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("1、C++不允许仅根据函数的返回类型重载函数名称；\n2、可以编写两个名称相同，参数也相同的函数，其中一个是"),s("strong",[this._v("const")]),this._v("，另一个不是。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("strong",[this._v("没用参数")]),this._v("的两个函数是不能重载的.说法是不正确的，因为还有const")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"♻️六、c-中『栈』和『堆』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#♻️六、c-中『栈』和『堆』"}},[this._v("#")]),this._v(" ♻️六、C++中『栈』和『堆』")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("源代码的重要性+编译器底层理解的重要性！")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("（1）如何定义1个『只能』在『堆』上生成对象的类？")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("在C++中，为了让某个类只能通过new来创建（即如果直接创建对象，编译器将报错），应该（）")]),this._v(" "),s("li",[this._v("将『析构函数』设为『私有』")]),this._v(" "),s("li",[this._v("原因：C++是静态")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("（2）如何定义1个『只能』在『栈』上生成对象的类？")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ul",[n("li",[t._v("将new和delete重载为『私有』")]),t._v(" "),n("li",[t._v("原因：在堆上生成对象，使用new关键字操作。看过源代码知道过程是2步！！")]),t._v(" "),n("li",[t._v("1、使用operator new在『堆』上找可用的内存，分配给对象")]),t._v(" "),n("li",[t._v("2、调用构造函数生成对象")]),t._v(" "),n("li",[t._v("所以，如果将new操作设置为『私有』，那么第1阶段就不能完成。『就不能在堆上生成对象』")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"♻️七、小知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#♻️七、小知识"}},[this._v("#")]),this._v(" ♻️七、小知识")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"常量表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常量表达式"}},[this._v("#")]),this._v(" 常量表达式")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"switch语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#switch语法"}},[this._v("#")]),this._v(" switch语法")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v("\n    \n选D "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v("\n    \n这个题目很好\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v("相当于枚举，"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v("这些整型都是又穷个数的\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v("有无穷多个，因此不能用"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v("类型\n\n『我在C"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("primer上面也看到，只要整型和"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v("』\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（1）switch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）switch"}},[this._v("#")]),this._v(" （1）switch")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("switch语句判断条件可以接受的数据类型有哪些？")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("\nbyte\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v("\n都可以，但是byte不是C"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("的。。。\n\n此外，"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v("也不是构造类型，它是一个基本类型，\n    我们可以将一个"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v("作为"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v("语句的表达式！！！『C"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" primer』说的\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（2）c-编译器好智能化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（2）c-编译器好智能化"}},[this._v("#")]),this._v(" （2）C++编译器好智能化")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("如果你只是声明一个空类，不做任何事情的话\n    编译器会自动为你生成：\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("、一个默认构造函数『构造函数』\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("、一个拷贝默认构造函数『拷贝构造函数』\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("、一个默认拷贝赋值操作符『拷贝赋值操作符函数』\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("、一个默认析构函数。『析构函数』\n这些函数只有在第一次被调用时，才会别编译器创建。\n    『『所有这些函数都是"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v("和"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v("的。』』\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"树——常考题型之一"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#树——常考题型之一"}},[this._v("#")]),this._v(" 树——常考题型之一")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"🍉笔试—编程系列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🍉笔试—编程系列"}},[this._v("#")]),this._v(" 🍉笔试—编程系列")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("环形链表的约瑟夫问题")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"💾-c-98关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#💾-c-98关键字"}},[this._v("#")]),this._v(" 💾 C++98关键字")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ul",[n("li",[n("p",[t._v("1、"),n("code",[t._v("static")])]),t._v(" "),n("ul",[n("li",[t._v("修改变量或函数存储的形式，比如"),n("code",[t._v(".data")]),t._v("，"),n("code",[t._v(".bss")])])])]),t._v(" "),n("li",[n("p",[t._v("2、"),n("code",[t._v("const")])]),t._v(" "),n("ul",[n("li",[t._v("修改变量or函数的只读方式")])])]),t._v(" "),n("li",[n("p",[t._v("3、"),n("code",[t._v("inline")])]),t._v(" "),n("ul",[n("li",[t._v("建议在“编译期”，直接将整个函数的代码插入调用语句处")])])]),t._v(" "),n("li",[n("p",[t._v("4、"),n("code",[t._v("friend")])]),t._v(" "),n("ul",[n("li",[t._v("声明友元，包括，友元函数，友元类")])])])])}],!1,null,null,null);s.default=e.exports}}]);