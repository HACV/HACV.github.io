(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{240:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[n("p",[t._v("title: Linux下多路IO转接模型"),n("br"),t._v("\ndate: 2020-08-09 08:00:01"),n("br"),t._v("\nsummary: 网络编程复习（四）")]),t._v(" "),n("h2",{attrs:{id:"linux下多路io复用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#linux下多路io复用"}},[t._v("#")]),t._v(" Linux下多路IO复用")]),t._v(" "),n("h2",{attrs:{id:"一、多路转接io目录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、多路转接io目录"}},[t._v("#")]),t._v(" 一、多路转接IO目录")]),t._v(" "),n("p",[t._v("多路IO转接模型\n有三种")]),t._v(" "),n("blockquote",[n("ul",[n("li",[t._v("select")]),t._v(" "),n("li",[t._v("poll")]),t._v(" "),n("li",[t._v("epoll")])])]),t._v(" "),n("p",[t._v("涉及高性能服务器开发方面"),n("br"),t._v("\nepoll是非常常用的系统调用，在很多的开源项目当中epoll都是核心技术，例如Nginx和Redis等等")]),t._v(" "),n("p",[t._v("目前epoll是linux大规模并发网络程序中的"),n("strong",[t._v("热门首选模型")]),t._v("。")]),t._v(" "),n("div",{staticClass:"language-txt line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("1. TCP状态转换\n   3种状态    2MSL  \n2. 半关闭\n   shutdown --- close\n3. 2MSL\n4. **端口复用**（比如，之前演示了，我们服务器在关闭的之后，**一段时间**哪个端口无法使用，实际上我们可以借助一个函数，把这个端口给他复用起来）\n   setsockopt(); --- UNP 7\n5. 多路IO转接服务器\n   server--监听  \n   select\n   \t参数： 返回值    4个辅助函数 \t\n   poll\n   \t参数： struct { fd， evnets， events}\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br")])]),n("h2",{attrs:{id:"二、总述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、总述"}},[t._v("#")]),t._v(" 二、总述")]),t._v(" "),n("p",[t._v("多线程和多进程效率低的原因：所有监听都是serve.c这个程序自己来做。")]),t._v(" "),n("p",[t._v("有一种好的方法：")]),t._v(" "),n("p",[t._v("多路IO转接服务器也叫做"),n("strong",[t._v("多任务IO服务器")]),t._v("。\n该类服务器实现的主旨思想是，不再由『应用程序』自己监视客户端连接，取而代之由"),n("strong",[t._v("内核")]),t._v("替应用程序监视文件。")]),t._v(" "),n("p",[t._v("重点在“转接”\n多路指的，多个访问请求的客户端。\n转接：言外之意，中间有个人帮我进行转换，转换客户端的请求，转接给我，然后我再进行操作。")]),t._v(" "),n("h2",{attrs:{id:"三、学习select和poll或者epoll的原因"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、学习select和poll或者epoll的原因"}},[t._v("#")]),t._v(" 三、学习select和poll或者epoll的原因")]),t._v(" "),n("p",[t._v("原因：CPU消耗大，主要用在CPU切换上")]),t._v(" "),n("p",[t._v("『"),n("strong",[t._v("CPU上下文切换")]),t._v("』，是需要操作一些句柄的，代价高。")]),t._v(" "),n("p",[t._v("多线程和多进程并发\n不适合，客户端非常庞大的情况。\n原因：开销大，占用资源\n详细点：他主要占用的资源，"),n("strong",[t._v("CPU消耗得大")]),t._v("。")]),t._v(" "),n("p",[t._v("起几百个进程，几百个线程，实际上对于Linux操作系统来说，在内核消耗上或者系统内部的消耗上。\n差别不是特别大。\n当然，我们知道，多线程比多进程好一些")]),t._v(" "),n("p",[t._v("上面，如果我们发现，那就是，如果每个客户端都和我进行数据交换。\n那我的"),n("strong",[t._v("CPU")]),t._v("岂不是就要"),n("strong",[t._v("频繁的进行切换")]),t._v("。")]),t._v(" "),n("p",[t._v("如何把这个降低呢？\n才有多路IO转接模型\n有三种（难度大一些了，使用起来，也比较不好理解，然后"),n("strong",[t._v("代码量相对来说，大一些")]),t._v("）")]),t._v(" "),n("blockquote",[n("ul",[n("li",[t._v("select")]),t._v(" "),n("li",[t._v("poll")]),t._v(" "),n("li",[t._v("epoll")])])]),t._v(" "),n("h2",{attrs:{id:"四、“3种”多路io转接服务器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、“3种”多路io转接服务器"}},[t._v("#")]),t._v(" 四、“3种”多路IO转接服务器")]),t._v(" "),n("p",[t._v("多线程和多进程效率低的原因"),n("br"),t._v("\n所有监听都是serve.c这个程序自己来做。")]),t._v(" "),n("p",[t._v("有一种好的方法：")]),t._v(" "),n("p",[t._v("多路IO转接服务器也叫做"),n("strong",[t._v("多任务IO服务器")]),t._v("。"),n("br"),t._v("\n该类服务器实现的主旨思想是，不再由应用程序自己监视客户端连接，取而代之由"),n("strong",[t._v("内核")]),t._v("替应用程序监视文件。")]),t._v(" "),n("p",[t._v("重点在“转接”"),n("br"),t._v("\n多路指的，多个访问请求的客户端。"),n("br"),t._v("\n转接：言外之意，中间有个人帮我进行转换，转换客户端的请求，转接给我，然后我再进行操作。")]),t._v(" "),n("h3",{attrs:{id:"_1）建立连接的『时候』的好处"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1）建立连接的『时候』的好处"}},[t._v("#")]),t._v(" 1）建立连接的『时候』的好处")]),t._v(" "),n("div",{staticClass:"language-txt line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("把内核请过来给我当帮手，我只需要根据我的设置请求，通知他，你去帮我监听这几个客户端，是否有请求。当这些客户端有请求的时候，帮助我监听的内核，会给我一个反馈，意思告诉我说，他们要对你发起请求了。）\n\n当我的监听的人，给我反馈的时候，我再去处理，我需不要等待？？\n不需要。比如，我们原先去处理的时候，我要调用accept函数，这个函数会阻塞（或者说等待，等待，客户端给我发链接）\n但是，现在阻塞等待这个事情，我让内核去干了。内核什么时候会给我反馈呢？那就是有人给我有连接请求了。\n所以说，当他给了我反馈的时候，我还需要等待吗？不需要！可以立即完成连接的建立。\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("h3",{attrs:{id:"_2）建立连接之『后』的好处"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2）建立连接之『后』的好处"}},[t._v("#")]),t._v(" 2）建立连接之『后』的好处")]),t._v(" "),n("div",{staticClass:"language-txt line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("我们连接之后的那条线，我们也可以把它丢给内核，要不然的话，\n我还得阻塞在这继续监听，是否给我发数据。\n内核你帮我，反正你监听一个也是听，听一堆也是听。\n监听到有请求的时候，再给我发一个反馈。当我收到反馈的时候，我应该干啥？\n表示对方已经写过了数据啥的了，都已经写到这边了，我所要做的事情就是\n在这个基础上，直接和对方去通信（read）\n\n\n如上，内核的这种行为有点像：\n我们先前讲信号的时候。注册那个信号捕捉函数。\n内核给你反馈了，就说明有事件发生了，但是具体是什么事件，还是不知道。\n比如，我向内核注册一下，帮我看着几个人，\n当内核你看到他有行动的时候，你再告诉我。\n\n有了内核帮我监听，那么我这个serve.c就解放出来了。\n我就不需要再阻塞了，我设置完监听之后，就可以去做其他的时候了。\n上面就是多路IO转接的基本思想。\n\n我们要讲的3种，思路几乎和这个一致。\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br")])]),n("p",[t._v("总结：")]),t._v(" "),n("ul",[n("li",[t._v("Linux下所有东西都是文件这个思想很重要！")]),t._v(" "),n("li",[n("strong",[t._v("在Linux系统编程和网络编程中，文件描述符的概念很重要！！")])])]),t._v(" "),n("h2",{attrs:{id:"五、select"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五、select"}},[t._v("#")]),t._v(" 五、select")]),t._v(" "),n("p",[t._v("具体实施的话，驱使我们先前的那个内核工作的，是谁来**驱使（需要用到函数，比如select）**呢？")]),t._v(" "),n("p",[t._v("如何使用起来select")]),t._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[t._v("select\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("\tselect能监听的文件描述符个数受限于FD_SETSIZE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("一般为"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),t._v("，单纯改变进程打开的文件描述符个数并不能改变select监听文件个数\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("\t解决"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),t._v("以下客户端时使用select是很合适的，但如果链接客户端过多，select采用的是轮询模型，会大大降低服务器响应效率，不应在select上投入更多精力\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/select.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* According to earlier standards */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/time.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("select")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nfds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("readfds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("writefds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\tfd_set "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("exceptfds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("timeval")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\tnfds"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" \t\t监控的文件描述符集里最大文件描述符加"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("，因为此参数会告诉内核检测前多少个文件描述符的状态\n\treadfds：\t监控有读数据到达文件描述符集合，传入传出参数\n\twritefds：\t监控写数据到达文件描述符集合，传入传出参数\n\texceptfds：\t监控异常发生达文件描述符集合"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("如带外数据到达异常，传入传出参数\n\ttimeout：\t定时阻塞监控时间，"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("种情况\n\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),t._v("，永远等下去\n\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("设置timeval，等待固定时间\n\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),t._v("设置timeval里时间均为"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("，检查描述字后立即返回，轮询\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("timeval")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" tv_sec"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* seconds */")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" tv_usec"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* microseconds */")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_CLR")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//把文件描述符集合里fd清0")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_ISSET")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//测试文件描述符集合里fd是否置1")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_SET")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//把文件描述符集合里fd位置1")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_ZERO")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd_set "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//把文件描述符集合里所有位清0")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//上面4个函数重要。有的函数，有点类似信号那部分的啥的？")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br")])]),n("p",[t._v("select函数一调，相当于，select函数会驱使内核帮助你完成监听。\n笼统的说，那就是借助select帮我监听、、")]),t._v(" "),n("h2",{attrs:{id:"六、poll"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#六、poll"}},[t._v("#")]),t._v(" 六、poll")]),t._v(" "),n("p",[t._v("实际上是在select这种模型上进行的一种升级，或者说，是改版。")]),t._v(" "),n("p",[t._v("函数原型比select简单")]),t._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<poll.h>")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("poll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pollfd")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("fds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("nfds_t")]),t._v(" nfds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pollfd")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 文件描述符 */")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" events"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 监控的事件 */")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" revents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 监控事件中满足条件返回的事件 */")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tPOLLIN\t\t\t普通或带外优先数据可读"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("即POLLRDNORM "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" POLLRDBAND\n\tPOLLRDNORM\t\t数据可读\n\tPOLLRDBAND\t\t优先级带数据可读\n\tPOLLPRI \t\t高优先级可读数据\n\tPOLLOUT\t\t普通或带外数据可写\n\tPOLLWRNORM\t\t数据可写\n\tPOLLWRBAND\t\t优先级带数据可写\n\tPOLLERR \t\t发生错误\n\tPOLLHUP \t\t发生挂起\n\tPOLLNVAL \t\t描述字不是一个打开的文件\n\n\tnfds \t\t\t监控数组中有多少文件描述符需要被监控\n\n\ttimeout \t\t毫秒级等待\n\t\t"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("：阻塞等，#define INFTIM "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" \t\t\t\tLinux中没有定义此宏\n\t\t"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("：立即返回，不阻塞进程\n\t\t"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("：等待指定毫秒数，如当前系统时间精度不够毫秒，向上取值\n如果不再监控某个文件描述符时，可以把pollfd中，fd设置为"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("，poll不再监控此pollfd，下次返回时，把revents设置为"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("。\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br")])]),n("h2",{attrs:{id:"七、epoll"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#七、epoll"}},[t._v("#")]),t._v(" 七、epoll")]),t._v(" "),n("p",[t._v("epoll是Linux下多路复用IO接口select/poll的增强版本，它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率，因为它会复用文件描述符集合来传递结果而不用迫使开发者每次等待事件之前都必须重新准备要被侦听的文件描述符集合，另一点原因就是获取事件的时候，它无须遍历整个被侦听的描述符集，只要遍历那些被内核IO事件异步唤醒而加入Ready队列的描述符集合就行了。\n目前epell是linux大规模并发网络程序中的热门首选模型。\nepoll除了提供select/poll那种IO事件的电平触发（Level Triggered）外，还提供了边沿触发（Edge Triggered），这就使得用户空间程序有可能缓存IO状态，减少epoll_wait/epoll_pwait的调用，提高应用程序效率。")]),t._v(" "),n("h2",{attrs:{id:"八、多路io转接服务器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#八、多路io转接服务器"}},[t._v("#")]),t._v(" 八、多路IO转接服务器")]),t._v(" "),n("pre",[n("code",[t._v("epoll\n")])]),t._v(" "),n("p",[t._v("要掌握epoll与前面的select和poll的区别和联系，以及，epoll的缺点。\nepoll函数的API:\nepoll_create();   --- int epfd = epoll(10);  --- epfd(句柄)\nstruct epoll_event events; events.events = EPOLLIN;\nevents.data.fd = lfd;\nepoll_ctl();\t--- epoll(epfd, EPOLL_CTL_ADD, lfd, &events);\t\nop:\tEPOLL_CTL_ADD/MOD/DEL")]),t._v(" "),n("pre",[n("code",[t._v("\t\t\tevents: EPOLLIN/OUT/ERR\n\n       typedef union epoll_data {\n           void        *ptr;\n           int          fd;\n           uint32_t     u32;\n           uint64_t     u64;\n       } epoll_data_t;\n\n       struct epoll_event {\n           uint32_t     events;      /* Epoll events */\n           epoll_data_t data;        /* User data variable */\n       };\n\t\t\t\t\n\t\tstruct epoll_event evt[100];\n\n\t\tepoll_wait(epfd, evt, 100, -1);  select   poll \n\n\nstruct epoll_evnet 结构体分析：\n\n\tevents; EPOLLIN/OUT/ERR\n\n\tdata:\tfd u32 u64  void *ptr:   int int * char *  void (*fun)(int arg)  stuct {\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tint fd;\n\n\t\t\t\t\t\t\t\t\t\t\tvoid *arg;\n\n\t\t\t\t\t\t\t\t\t\t\tvoid (*fun)(int fd, void *arg)\t\n\n\t\t\t\t\t\t\t\t\t\t  } *ptr;\n")])]),t._v(" "),n("p",[t._v("​"),n("br"),t._v("\nepoll的两种模式：epoll ET 和epoll LT\nepoll ET\n​\t\t边沿触发。    event = EPOLLIN | EPOLLET\nepoll LT\n​\t\t水平触发。")]),t._v(" "),n("pre",[n("code",[t._v('epoll 非阻塞IO\n\n\t边沿触发    while(read())   fcntl(O_NONBLOCK);\n\n\nepoll 反应堆模型 (libevent 核心思想实现)\n\n\tlibevent  -- 跨平台   精炼--epoll  回调   \n\n\t1. epoll --- 服务器 --- 监听 --- fd ----可读 ---- epoll返回 ---- read --- 小写转大写 --- write ---- epoll继续监听。\n\n\t2. epoll 反应堆模型：\n\t\t\t\t\t\t\t\t\t\t\t\t      ("滑动窗口")\n\n\t1) epoll --- 服务器 --- 监听 --- cfd ---- 可读 ---- epoll返回 ---- read -- cfd从树上摘下 --- 设置监听cfd写事件， 操作 \n\n\t--- 小写转大写 -- 等待epoll_wait 返回 --- 回写客户端 -- cfd从树上摘下 ----- 设置监听cfd读事件， 操作 -- epoll继续监听。\n\n\t2) evt[i].events = EPOLLIN, evt[I].data.fd == cfd       *ptr     struct {int fd, void (*func)(void *arg), void *arg}\n')])]),t._v(" "),n("p",[t._v("struct myevent_s {\nint fd;                                                 //要监听的文件描述符\nint events;                                             //对应的监听事件\nvoid *arg;                                              //泛型参数\nvoid (*call_back)(int fd, int events, void *arg);       //回调函数\nint status;                                             //是否在监听:1->在红黑树上(监听), 0->不在(不监听)\nchar buf[BUFLEN];\nint len;\nlong last_active;                                       //记录每次加入红黑树 g_efd 的时间值\n};")]),t._v(" "),n("pre",[n("code",[t._v("心跳包\n\n\tserver/client    保持连接状态\n兵乓包\n\nTCP属性。———探测分节。\n\n\n线程池\n")])]),t._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("threadpool_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_mutex_t")]),t._v(" lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("               "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 用于锁住本结构体 */")]),t._v("    \n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_mutex_t")]),t._v(" thread_counter"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 记录忙状态线程个数de琐 -- busy_thr_num */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_cond_t")]),t._v(" queue_not_full"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 当任务队列满时，添加任务的线程阻塞，等待此条件变量 */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_cond_t")]),t._v(" queue_not_empty"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 任务队列里不为空时，通知等待任务的线程 */")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("threads"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                 "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 存放线程池中每个线程的tid。数组 */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_t")]),t._v(" adjust_tid"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("               "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 存管理线程tid */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("threadpool_task_t")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("task_queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 任务队列 */")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" min_thr_num"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 线程池最小线程数 */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" max_thr_num"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 线程池最大线程数 */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" live_thr_num"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 当前存活线程个数 */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" busy_thr_num"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 忙状态线程个数 */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" wait_exit_thr_num"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("              "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 要销毁的线程个数 */")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" queue_front"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* task_queue队头下标 */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" queue_rear"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* task_queue队尾下标 */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" queue_size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* task_queue队中实际任务数 */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" queue_max_size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                 "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* task_queue队列可容纳任务数上限 */")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" shutdown"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 标志位，线程池使用状态，true或false */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br")])]),n("h2",{attrs:{id:"九、工程概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#九、工程概念"}},[t._v("#")]),t._v(" 九、工程概念")]),t._v(" "),n("h3",{attrs:{id:"（1）心跳包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#（1）心跳包"}},[t._v("#")]),t._v(" （1）心跳包")]),t._v(" "),n("p",[t._v("心跳检测机制\n"),n("strong",[t._v("在TCP网络通信中，经常会出现客户端和服务器之间的非正常断开，需要实时检测查询链接状态")]),t._v("。常用的解决方法就是在程序中加入心跳机制。\n"),n("strong",[t._v("Heart-Beat线程")]),t._v("\n这个是最常用的简单方法。在接收和发送数据时个人设计一个守护进程(线程)，"),n("strong",[t._v("定时发送Heart-Beat包")]),t._v("，客户端/服务器收到该小包后，立刻返回相应的包即可检测对方是否实时在线。\n该方法的好处是通用，但缺点就是会改变现有的通讯协议！大家一般都是使用业务层心跳来处理，主要是灵活可控。\nUNIX网络编程不推荐使用SO_KEEPALIVE来做心跳检测，还是在业务层以心跳包做检测比较好，也方便控制。")]),t._v(" "),n("h3",{attrs:{id:"（2）乒乓包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#（2）乒乓包"}},[t._v("#")]),t._v(" （2）乒乓包")]),t._v(" "),n("p",[t._v("和心跳包类似，但是它可以携带少量的数据\n比如，微信的朋友圈红点。")])])}],!1,null,null,null);s.default=e.exports}}]);