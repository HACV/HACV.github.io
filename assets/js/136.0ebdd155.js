(window.webpackJsonp=window.webpackJsonp||[]).push([[136],{301:function(t,a,s){"use strict";s.r(a);var e=s(0),r=Object(e.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"面向对象难点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向对象难点"}},[t._v("#")]),t._v(" 面向对象难点")]),t._v(" "),s("h2",{attrs:{id:"一、类型转换函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、类型转换函数"}},[t._v("#")]),t._v(" 一、类型转换函数")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("带非默认参数的构造函数可以把基本类型数据转换成类类型对象。")])]),t._v(" "),s("li",[s("p",[t._v("类型转换函数可以把类类型对象转换为其他指定类型对象。")])]),t._v(" "),s("li",[s("p",[t._v("类型转换函数只能定义为一个类的成员函数，不能定义为类的友元函数。")])])]),t._v(" "),s("h2",{attrs:{id:"二、c-难点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、c-难点"}},[t._v("#")]),t._v(" 二、C++难点")]),t._v(" "),s("p",[t._v("面向对象的三大基本特征：封装、继承、多态")]),t._v(" "),s("p",[t._v("面向对象的五大基本原则：")]),t._v(" "),s("p",[t._v("单一职责原则、开放封闭原则、里氏替换原则、依赖倒置原则、接口隔离原则")])])}],!1,null,null,null);a.default=r.exports}}]);