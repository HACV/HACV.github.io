(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{220:function(t,s,a){"use strict";a.r(s);var e=a(0),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("hr"),t._v(" "),a("p",[t._v("title:  Linux系统——线程\ndate: 2020-07-21 09:00:00\ncategories:")]),t._v(" "),t._m(0),t._v(" "),a("p",[t._v("img: /photos/2020.6.03_15/2020_06_15_cover.jpg\ntop: false\nsummary: 线程\nmathjax: true")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),a("p",[t._v("安装pthread的man pages")]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),a("p",[t._v("系统要是不带，比如，我的阿里云CentOS")]),t._v(" "),t._m(8),a("p",[t._v("安装")]),t._v(" "),t._m(9),t._m(10),t._v(" "),a("p",[t._v("我进行yum源更新")]),t._v(" "),t._m(11),a("p",[t._v("然后，就可以了。")]),t._v(" "),a("p",[t._v("效果如下：")]),t._v(" "),t._m(12),t._m(13),t._v(" "),t._m(14),t._v(" "),a("p",[t._v("要求，能够完成，线程和进程控制原语进行对比记忆！！！！")]),t._v(" "),t._m(15),t._v(" "),a("p",[t._v("什么是线程？\nLinux下的线程实现和Windows下的实现是完全不一样的原理。\n（详见，我的另一篇博客）")]),t._v(" "),t._m(16),t._v(" "),a("p",[t._v("其实，类Unix里面，进程设计这种理念实际上比较完善了。\n没有很大的缺点。（所以，硬生生，把进程那啥，变成线程。。。变化过来的）\n而进程在Windows操作系统下，几乎没法用。系统能力不是一般的低。\n因此，Windows下线程是非常常见的，进程反而很少去提到。")]),t._v(" "),a("p",[t._v("Linux下，用线程和进程差别不是特别大（但是有差别），看个人习惯和爱好")]),t._v(" "),a("p",[t._v("Linux下线程：LWP：light weight process 轻量级的进程，本质仍是进程(在Linux环境下)")]),t._v(" "),a("p",[t._v("Linux下的进程和线程对比")]),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),a("p",[t._v("什么叫三级页表?")]),t._v(" "),a("img",{attrs:{src:"https://gitee.com/HACV/images_bed/raw/master/MainBlog/2020/2020_07/07_21/01.png"}}),t._v(" "),a("p",[t._v("有的指针指向一个空间，我们叫页表。\n如图，一个个目录项都是一个指针。\n如上图，上面采用的三级映射的方法，4个东西，整个称之为3级页表。\n三级映射和我们之前讲过的\n虚拟内存和物理内存映射是什么关系？？\n我们上面的，三级页表实际上就是在描述，MMU怎么样帮你把虚拟地址，映射到物理地址！！\n上面的是简略的图，实际上的不能直接从用户空间对应过去。\nMMU有个映射表，显然这个会和我们的三级页表进行对应，其实，映射表是保存在内核空间的。")]),t._v(" "),t._m(22),t._v(" "),a("p",[t._v("线程与线程之间，肯定整个地址空间不会完全相同，最起码要保证运行指令不一样。（不然，你复制有意义吗？）")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("线程可看做寄存器和栈的集合（栈，线程在执行过程中，我们执行的主要依据是：函数调用，因为线程1和2内部的函数是不一样的）\n"),a("font",{staticStyle:{background:"yellow"},attrs:{size:"5"}},[a("strong",[t._v("注意，强调了栈")])])],1)])]),t._v(" "),a("p",[t._v("实际上分配空间，就是两个指针，esp和ebp的移动。\n原先是重合，后面慢慢拉开，形成栈帧（帧，一张张，我们知道，每一个函数有属于自己运行的栈帧空间）")]),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),a("p",[t._v("Linux下CPU划分时间仑片，是依据什么？\nlwp号（其实叫，轻量级线程，但是我们也可以叫，线程号，，）")]),t._v(" "),a("p",[t._v("Linux下命令")]),t._v(" "),t._m(26),a("p",[t._v("比如，这样，能知道3500这个进程下有哪些线程？")]),t._v(" "),t._m(27),t._v(" "),a("p",[a("font",{staticStyle:{background:"yellow"}},[t._v("lwp是线程号，但是不是线程id，注意")])],1),t._v(" "),t._m(28),t._v(" "),a("p",[t._v("同一个进程中的线程，他们的PCB虽然是不一样的，但是其中的三级页表却是相同的。")]),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),a("p",[t._v("线程优、缺点\n优点：\n1.提高程序并发性\n2.开销小（开10个线程比开10个进程小）\n3.数据通信、共享数据方便（如前分析，比如，我们进程之间通信用IPC，现在我们线程都不需要这个了，比如全局变量，只见拿过来用）\n缺点：\n1.库函数，不稳定（线程里面，所有的函数都是库函数，所以说，对于第3方库函数而言，相较于进程而言，我们在进程当中，使用的函数，绝大多数都是系统调用，稳定性高一些，，但是线程的库函数的稳定性却没那么高）\n2.调试、编写困难、gdb不支持（别的不说，gdb你在线程里面就别用了，用也用不了，因为gdb出现的时候，线程概念还没出现，，，，）（有第3方开发工具，就用它调试，没有就靠自己手工切，滑稽，其实可以加输出，其实高手调试的时候，都是直接加printf来，一般不用调试工具，这个调试方法，永远有效）\n3.对信号支持不好（毕竟，线程概念出现比较晚）")]),t._v(" "),a("p",[t._v("优点相对突出，缺点均不是硬伤。Linux下由于实现方法导致进程、线程差别不是很大。")]),t._v(" "),a("p",[t._v("所以，从熟识度来说，可能用进程编程的人多一些\n但是，从程序角度，用线程。")]),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),a("p",[t._v("线程ID：pthread_t类型，本质：在Linux下为无符号整数(%lu)，其他系统中可能是结构体实现\n线程ID是进程内部，识别标志。(两个进程间，线程ID允许相同)\n注意：不应使用全局变量 pthread_t tid，在子线程中通过pthread_create传出参数来获取线程ID，而应使用pthread_self。")]),t._v(" "),a("p",[t._v("我们安装的man page起作用了")]),t._v(" "),t._m(35),t._m(36),t._m(37),t._v(" "),a("p",[t._v("创建一个新线程。\n其作用，对应进程中fork() 函数。")]),t._v(" "),t._m(38),a("p",[t._v("参数：\npthread_t：当前Linux中可理解为：typedef  unsigned long int  pthread_t;\n参数1：传出参数，保存系统为我们分配好的线程ID\n参数2：通常传NULL，表示使用线程默认属性。若想使用具体属性也可以修改该参数。（一般使用，NULL表示线程的默认属性）\n参数3：函数指针，指向线程主函数(线程体)，该函数运行结束，则线程结束。\n参数4：线程主函数执行期间所使用的参数。")]),t._v(" "),a("p",[t._v("我们写一个函数测试一下")]),t._v(" "),t._m(39),a("p",[t._v("注意链接的时候记得加上")]),t._v(" "),t._m(40),a("p",[t._v("线程之间共享全局变量\n进程之间全局变量是不共享的，所以才有的IPC。")]),t._v(" "),t._m(41),t._v(" "),a("p",[t._v("将单个线程退出")]),t._v(" "),t._m(42),t._m(43),t._v(" "),a("p",[t._v("阻塞等待线程退出，获取线程退出状态\n其作用，对应进程中 waitpid() 函数。")]),t._v(" "),t._m(44),t._v(" "),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),t._m(48),t._v(" "),t._m(49),t._v(" "),a("p",[t._v("杀死(取消)线程\n其作用，对应进程中 kill() 函数。")]),t._v(" "),a("p",[t._v("kill是通过通过发信号杀死的，但是线程的这个函数杀死成功率很高。")]),t._v(" "),t._m(50),t._m(51),t._v(" "),a("p",[t._v("现在的Linux操作系统中，这个函数没神马用，现在ID都是整数，之间数学比较就好了\n以前，pthread_t是为了以后可能的扩展，比如现在是int,以后是结构体。")]),t._v(" "),a("p",[t._v("比较两个线程ID是否相等。")]),t._v(" "),t._m(52),a("p",[t._v("有可能Linux在未来线程ID pthread_t 类型被修改为结构体实现。")]),t._v(" "),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),t._v(" "),a("p",[t._v("一般情况下，实际上我们在做开发的时候，我们线程的默认属性是能够满足我们大多数情况下的需求的。\n极个别的时候，线程的默认属性不满足，就需要我们自己来设定。")]),t._v(" "),t._m(56),t._v(" "),t._m(57),t._m(58),t._v(" "),t._m(59),t._v(" "),t._m(60),t._v(" "),a("p",[t._v("我们知道Linux下面，都是GNU组织给我们提供的lib库\n你用这个可以查询当前库的版本")]),t._v(" "),a("p",[t._v("1.察看当前pthread库版本")]),t._v(" "),t._m(61),a("p",[t._v("比如我的阿里云服务器")]),t._v(" "),t._m(62),t._m(63),t._v(" "),t._m(64)])}),[function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("操作系统\ntags:")]),this._v(" "),s("li",[this._v("Linux")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"cover-falsepassword"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cover-falsepassword"}},[this._v("#")]),this._v(" cover: false\npassword:")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"零、准备工作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#零、准备工作"}},[this._v("#")]),this._v(" 零、准备工作")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_1）非红帽的，比如乌班图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1）非红帽的，比如乌班图"}},[this._v("#")]),this._v(" 1）非红帽的，比如乌班图")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("命令："),s("code",[this._v("sudo apt-get install manpages-posix-dev")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_2）红帽系列，centos"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2）红帽系列，centos"}},[this._v("#")]),this._v(" 2）红帽系列，CentOS")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("安装pthread的man pages："),s("code",[this._v("yum -y install man-pages")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("安装完成，使用"),s("code",[this._v("man -k pthread")]),this._v("如能看到线程函数列表则表明安装成功。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("[省略]# man -k pthread\npthread: nothing appropriate.\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br"),s("span",{staticClass:"line-number"},[this._v("2")]),s("br")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("[省略]# yum -y install man-pages\nCentOS-8 - AppStream                                                                                                              627 kB/s | 4.3 kB     00:00    \nCentOS-8 - Base                                                                                                                   608 kB/s | 3.9 kB     00:00    \nCentOS-8 - Extras                                                                                                                 257 kB/s | 1.5 kB     00:00    \nExtra Packages for Enterprise Linux 8 - x86_64                                                                                    806 kB/s | 4.7 kB     00:00    \nPackage man-pages-4.15-6.el8.x86_64 is already installed.\nDependencies resolved.\nNothing to do.\nComplete!\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("但是，"),s("code",[this._v("man -k pthread")]),this._v("还是没有\n如何解决？？")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("yum update\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("[省略~]# man -k pthread\npthread.h (0p)       - threads\npthread_atfork (3)   - register fork handlers\npthread_atfork (3p)  - register fork handlers\npthread_attr_destroy (3) - initialize and destroy thread attributes object\npthread_attr_destroy (3p) - destroy and initialize the thread attributes object\npthread_attr_getaffinity_np (3) - set/get CPU affinity attribute in thread \n省略\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"本章概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本章概述"}},[this._v("#")]),this._v(" 本章概述")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("ul",[s("li",[this._v("1.线程概念\n线程与进程关系。\n线程之间共享、非共享\n优缺点")]),this._v(" "),s("li",[this._v("2.线程控制原语（对线程进行控制的时候，所要使用到的函数,几乎能和线程控制原语能一一对应起来）\npthread_self\ncreate\nexit\njoin\n对比记忆\n|进程|线程|\n|---|---|\n|fork\t\t|pthead_create|\n|exit(10)\t|pthead_exit(void *);|\n|wait(int *)\t|pthread_join（， void **）   阻塞     分离 22 ； cancel -1|\n|kill()\t\t|pthread_cancel();\t取消点(检查点)：系统调用|\nman 7 pthreads\npthread_testcancel(); 系统调用\ngetpid()\tpthread_self();\npthread_detach();  分离。 --自动清理pcb。")]),this._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[this._v("线程属性（扩展知识，特殊应用）\n修改线程属性的方法")])])]),this._v(" "),s("li",[s("ol",{attrs:{start:"4"}},[s("li",[this._v("注意的事项")])])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"一、线程基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、线程基础"}},[this._v("#")]),this._v(" 一、线程基础")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("ul",[s("li",[this._v("Linux下，线程是依托于进程来实现的！\n类Unix系统中，早期是没有“线程”概念的，80年代才引入，借助进程机制实现出了线程的概念。因此在这类系统中，进程和线程关系密切。")]),this._v(" "),s("li",[this._v("出来是因为，其他操作系统中提出了线程这个概念，Unix为了不落后。")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("进程")]),t._v(" "),a("th",[t._v("线程")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("（独居）独立地址空间，拥有PCB")]),t._v(" "),a("td",[t._v("（一块住，合租）也有PCB，但没有独立的地址空间(共享)")])]),t._v(" "),a("tr",[a("td",[t._v("最小"),a("strong",[t._v("分配资源")]),t._v("单位，可看成是只有一个线程的进程")]),t._v(" "),a("td",[t._v("最小的"),a("strong",[t._v("执行")]),t._v("单位")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("ul",[s("li",[this._v("Q:为什么多线程下载更快？？\nA：由于线程是最小的"),s("strong",[this._v("执行")]),this._v("单位，所以，线程多的，相同时间内，能够被分到CPU的概率大一些，执行起来会快一些。因此多线程能够提高程序的执行效率。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"二、linux下线程的实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、linux下线程的实现原理"}},[this._v("#")]),this._v(" 二、Linux下线程的实现原理")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("ul",[s("li",[this._v("1）创建线程使用的底层函数和进程一样，都是clone\n就是说，pthead_create和fork底层都是调用clone函数。")]),this._v(" "),s("li",[this._v("2）从内核（操作系统来看）里看进程和线程是一样的,都有各自不同的PCB，但是"),s("strong",[this._v("PCB中指向内存资源的三级页表是相同的")])])]),this._v(" "),s("blockquote",[s("ul",[s("li",[this._v("因为操作系统区分进程和线程，以PCB作为区分依据，PCB叫做进程控制块/进程描述符，，正是因为这个PCB的这个，因此把PCB分配给一个线程，他就伪装成一个进程，因此CPU在分配时间片的时候，他才会把一个线程也分配一个自己的时间片,加快执行效率。（根本原因：因为，内部在实现的时候，有一个关于内存映射的这样一个问题）")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_1）三级页表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1）三级页表"}},[this._v("#")]),this._v(" 1）三级页表")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("注意图片中，新建的线程，虽然PCB是和前面的进程独立的，但是那个指针还是一样的（注意）")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("（注意：栈帧里面放局部变量和"),s("strong",[this._v("临时值")]),this._v("（比如，某函数被调用，那他要"),s("strong",[this._v("保留，原先的ebp和esp")]),this._v("，这样这个函数被调用完之后，才能返回去））")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上分析：\n每一个线程在调用的时候，都有自己的函数调用。那么"),s("strong",[this._v("每一个线程的stack空间（用户空间中的栈），不能一样")]),this._v("。不然，线程与线程之间，无法区分。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上面的内核区，其实还有内核栈，它的作用，主要是用来保存寄存器的值。\n什么时候需要保存？？"),s("strong",[this._v("进程在要切换")]),this._v("的时候，因为CPU要把时间轮片分给不同的进程。\n现在变成线程的概念，现在CPU要把这个分配给线程运行，那么线程需不需要保存寄存器的值？显然需要，所以，显然线程需要有属于自己的内核栈空间。\n（所以，能理解寄存器和栈那些了）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[this._v("ps")]),this._v(" -Lf "),s("span",{pre:!0,attrs:{class:"token number"}},[this._v("3500")]),this._v("\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("比如，Firefox里面采用的"),s("strong",[this._v("线程池")]),this._v("机制，同时开了好多个。\n所以，可能我们只打开了几个页面，却发现有好多个线程。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("ul",[s("li",[s("strong",[this._v("线程号")]),this._v("的作用：CPU分配时间仑片的作用")]),this._v(" "),s("li",[s("strong",[this._v("线程id")]),this._v("的作用：是进程内部区分线程的!!!!")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_2）线程优点和缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2）线程优点和缺点"}},[this._v("#")]),this._v(" 2）线程优点和缺点")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("blockquote",[a("ul",[a("li",[t._v("线程"),a("strong",[t._v("共享")]),t._v("资源\n1.文件描述符表\n2.每种信号的处理方式（由于，线程和信号都很麻烦，编程的时候，能够减少他们合体就尽量避免——")])]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("信号和进程是早期就有的，但信号复杂，线程是后期才有的。\n3.当前工作目录（工作目录是根据进程定的）\n4.用户ID和组ID\n5."),a("strong",[t._v("内存地址空间 (.text/.data/.bss/heap/共享库)")]),t._v("，0-3G就把那个stack给排除了。")])])]),t._v(" "),a("ul",[a("li",[t._v("线程"),a("strong",[t._v("非共享")]),t._v("资源\n1.线程id\n2.处理器现场（即，寄存器的值）和栈指针(内核栈)\n3.独立的栈空间(用户空间栈)\n4."),a("strong",[t._v("errno变量")]),t._v("（这个变量，是个全局变量，是放在.data段，但是，他很特殊，每个线程独享。注意！！）\n5.信号屏蔽字（毕竟，线程概念是后面来的）\n6."),a("strong",[t._v("调度优先级")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"三、线程控制原语"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、线程控制原语"}},[this._v("#")]),this._v(" 三、线程控制原语")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_1）pthread-self函数（获得线程id）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1）pthread-self函数（获得线程id）"}},[this._v("#")]),this._v(" 1）pthread_self函数（获得线程ID）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("获取"),s("strong",[this._v("线程ID")]),this._v("\n对应进程中 getpid() 函数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("pthread_t pthread_self(void);\t返回值：成功：0；\t失败：无！\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[this._v("man")]),this._v(" pthread_self\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("PTHREAD_SELF(3)                       Linux Programmer's Manual                      PTHREAD_SELF(3)\nNAME\n       pthread_self - obtain ID of the calling thread\nSYNOPSIS\n       #include <pthread.h>\n       pthread_t pthread_self(void);\n       Compile and link with -pthread.\n       //这句话告诉，gcc编译，链接使用-pthread才能编译通过\n       //原因：从某种角度来讲，我们的线程库不是标准库，不是大家经常使用的标准C库了。\n       //gcc编译的时候却是在给我们链接标准C库。\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_2）pthread-create函数（创建线程）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2）pthread-create函数（创建线程）"}},[this._v("#")]),this._v(" 2）pthread_create函数（创建线程）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("\tint pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg);\n\t返回值：成功：0；\t失败：错误号\t-----Linux环境下，所有线程特点，失败均直接返回错误号。（这是和进程不同的地方）\n    可以借助下面的\n    strerror函数很简单，参数要接受一个错误号，帮你把这个错误号，转换为错误字符串描述。\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br"),s("span",{staticClass:"line-number"},[this._v("2")]),s("br"),s("span",{staticClass:"line-number"},[this._v("3")]),s("br"),s("span",{staticClass:"line-number"},[this._v("4")]),s("br")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<string.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdlib.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<pthread.h>")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" var"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("exit_t")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("thrd_func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("exit_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("retvar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("exit_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    retvar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'m'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    retvar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("var "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcpy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("retvar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"my thread"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_exit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("retvar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_t")]),t._v(" tid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ret"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("exit_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("retval "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("exit_t")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    ret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("tid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thrd_func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("retval"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pthread_create error:%s\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strerror")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("retval"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ch = %c, var = %d, str = %s\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" retval"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" retval"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("var"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" retval"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("retval"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_exit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br"),a("span",{staticClass:"line-number"},[t._v("39")]),a("br"),a("span",{staticClass:"line-number"},[t._v("40")]),a("br"),a("span",{staticClass:"line-number"},[t._v("41")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("[略~]# gcc -pthread te.c\n[略 ~]# ls\na.out  solution.cpp  te.c  test.c\n[略 ~]# ./a.out\nch = m, var = 200, str = my thread\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br"),s("span",{staticClass:"line-number"},[this._v("2")]),s("br"),s("span",{staticClass:"line-number"},[this._v("3")]),s("br"),s("span",{staticClass:"line-number"},[this._v("4")]),s("br"),s("span",{staticClass:"line-number"},[this._v("5")]),s("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_3）pthread-exit函数（退出线程）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3）pthread-exit函数（退出线程）"}},[this._v("#")]),this._v(" 3）pthread_exit函数（退出线程）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("void pthread_exit(void *retval);\t参数：retval表示线程退出状态，通常传NULL\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_4）pthread-join函数（用于，线程回收）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4）pthread-join函数（用于，线程回收）"}},[this._v("#")]),this._v(" 4）pthread_join函数（用于，线程回收）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_5）pthread-detach函数（线程分离）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5）pthread-detach函数（线程分离）"}},[this._v("#")]),this._v(" 5）pthread_detach函数（线程分离）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这个函数在进程当中没有对应的\n实现"),s("strong",[this._v("线程分离")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",[s("code",[this._v('int pthread_detach(pthread_t thread);\t成功：0；失败：错误号\n线程分离状态：指定该状态，线程主动与主控线程断开关系。线程结束后，其退出状态不由其他线程获取，而直接自己自动释放。\n<font style="background: yellow" size=5>网络、多线程服务器常用。(很重要，因为状态分离后就不会产生僵尸进程了）</font>\n')])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("从状态上实现了分离，好处如下：\n进程若有该机制，将不会产生僵尸进程。僵尸进程的产生主要由于进程死后，大部分资源被释放，一点残留资源仍存于系统中，导致内核认为该进程仍存在。\n因此在，网络、多线程服务器常用。\n也可使用 pthread_create函数参2(线程属性)来设置线程分离。\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br"),s("span",{staticClass:"line-number"},[this._v("2")]),s("br"),s("span",{staticClass:"line-number"},[this._v("3")]),s("br"),s("span",{staticClass:"line-number"},[this._v("4")]),s("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("记得有书上说，虽说理论上，线程创建好之后，就和父进程在等同的地位上抢夺CPU\n但是这个繁复做实验，发现，一般情况下是"),s("strong",[this._v("主控线程")]),this._v("先执行，一般线程后执行。当然，只是科普，不敢这么写代码")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_6）pthread-cancel函数（杀死线程）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6）pthread-cancel函数（杀死线程）"}},[this._v("#")]),this._v(" 6）pthread_cancel函数（杀死线程）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("int pthread_cancel(pthread_t thread);\t成功：0；失败：错误号\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_7）pthread-equal函数（判断进程id相等）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7）pthread-equal函数（判断进程id相等）"}},[this._v("#")]),this._v(" 7）pthread_equal函数（判断进程ID相等）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("int pthread_equal(pthread_t t1, pthread_t t2);\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"控制原语对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#控制原语对比"}},[this._v("#")]),this._v(" 控制原语对比")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("进程")]),t._v(" "),a("th",[t._v("线程")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("fork")]),t._v(" "),a("td",[t._v("pthread_create")])]),t._v(" "),a("tr",[a("td",[t._v("exit")]),t._v(" "),a("td",[t._v("pthread_exit")])]),t._v(" "),a("tr",[a("td",[t._v("wait")]),t._v(" "),a("td",[t._v("pthread_join")])]),t._v(" "),a("tr",[a("td",[t._v("kill")]),t._v(" "),a("td",[t._v("pthread_cancel")])]),t._v(" "),a("tr",[a("td",[t._v("getpid")]),t._v(" "),a("td",[t._v("pthread_self\t\t命名空间")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"四、线程属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、线程属性"}},[this._v("#")]),this._v(" 四、线程属性")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("ul",[s("li",[this._v("如我们对程序的性能提出更高的要求那么需要设置线程属性，比如可以通过设置线程"),s("strong",[this._v("栈的大小")]),this._v("来降低内存的使用，增加最大线程个数。")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("typedef struct\n{\nint \t\t\t\t\tetachstate; \t//线程的分离状态\nint \t\t\t\t\tschedpolicy; \t//线程调度策略\nstruct sched_param\tschedparam; \t//线程的调度参数\nint \t\t\t\t\tinheritsched; \t//线程的继承性\nint \t\t\t\t\tscope; \t\t//线程的作用域\nsize_t \t\t\t\tguardsize; \t//线程栈末尾的警戒缓冲区大小\nint\t\t\t\t\tstackaddr_set; //线程的栈设置\nvoid* \t\t\t\tstackaddr; \t//线程栈的位置\nsize_t \t\t\t\tstacksize; \t//线程栈的大小\n} pthread_attr_t;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"五、线程库版本（nptl实现机制-posix-，native-posix-thread-library）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、线程库版本（nptl实现机制-posix-，native-posix-thread-library）"}},[this._v("#")]),this._v(" 五、线程库版本（NPTL实现机制(POSIX)，Native POSIX Thread Library）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所谓NPTL就是你需要在使用线程的时候，注意一下使用的线程库的版本是什么。（原因是，我们编写的程序，可能"),s("strong",[this._v("跨平台开发")]),this._v("）\n"),s("strong",[this._v("（库的版本不一样，可能导致程序运行失败，甚至异常）")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们先前用的都是"),s("code",[this._v("POSIX标准")]),this._v("下面所"),s("strong",[this._v("默认推荐的线程库。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[this._v("getconf GNU_LIBPTHREAD_VERSION\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("[略 ~]# getconf GNU_LIBPTHREAD_VERSION\nNPTL 2.28\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br"),s("span",{staticClass:"line-number"},[this._v("2")]),s("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("2."),s("strong",[this._v("NPTL实现机制(POSIX)，Native POSIX Thread Library")]),this._v("\n3.使用线程库时gcc指定 –lpthread")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("线程使用注意事项\n1.主线程退出其他线程不退出，主线程应调用pthread_exit\n2.避免僵尸线程\npthread_join\npthread_detach\npthread_create指定分离属性\n被join线程可能在join函数返回前就释放完自己的所有内存资源，所以不应当返回被回收线程栈中的值;\n3."),s("strong",[this._v("malloc和mmap申请的内存可以被其他线程释放")]),this._v("\n4.应避免在多线程模型中调用fork除非，马上exec，子进程中只有调用fork的线程存在，其他线程在子进程中均pthread_exit\n5."),s("strong",[this._v("信号的复杂语义很难和多线程共存，应避免在多线程引入信号机制")])])}],!1,null,null,null);s.default=n.exports}}]);